<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sukiyの博客</title>
  
  <subtitle>Sukiy</subtitle>
  <link href="https://bileis.github.io/atom.xml" rel="self"/>
  
  <link href="https://bileis.github.io/"/>
  <updated>2024-05-17T11:34:07.600Z</updated>
  <id>https://bileis.github.io/</id>
  
  <author>
    <name>阮·伟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySql表查询</title>
    <link href="https://bileis.github.io/2024/05/17/MySql%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    <id>https://bileis.github.io/2024/05/17/MySql%E8%A1%A8%E6%9F%A5%E8%AF%A2/</id>
    <published>2024-05-17T11:33:15.000Z</published>
    <updated>2024-05-17T11:34:07.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#查询全部数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu`;</span><br><span class="line">#格式化查询数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu`\G;</span><br><span class="line">#查询表中其中的一部分字段数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `s_name` <span class="keyword">FROM</span> `stu`;</span><br><span class="line">#带条件查询</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `s_name`<span class="operator">=</span><span class="string">'rose'</span>;</span><br><span class="line">#如果有多个条件，不同的条件之间用<span class="keyword">and</span>  <span class="keyword">or</span></span><br><span class="line"><span class="keyword">not</span> 链接</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `s_name`<span class="operator">=</span><span class="string">'rose'</span> <span class="keyword">OR</span> `s_name`<span class="operator">=</span><span class="string">'lisa'</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `s_name`<span class="operator">=</span><span class="string">'rose'</span> <span class="keyword">AND</span> `s_id`<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">#<span class="operator">&gt;</span> <span class="operator">&lt;</span> <span class="operator">!=</span>可以添加在查询条件里面</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `s_name`<span class="operator">!=</span><span class="string">'rose'</span>;</span><br><span class="line">#模糊查询</span><br><span class="line">#<span class="keyword">like</span> 模糊查询的关键字 ，如果<span class="keyword">like</span>后面没有添加通配符，则于<span class="operator">=</span>号表示一致</span><br><span class="line">#<span class="operator">%</span> :表示任意字符任意长度</span><br><span class="line">#_ :表示单个任意字符</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `s_name`<span class="operator">=</span><span class="string">'li%'</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `s_name` <span class="keyword">LIKE</span> <span class="string">'li__'</span>;</span><br><span class="line">#范围查询 <span class="number">16</span>或者<span class="number">18</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu_info` <span class="keyword">WHERE</span> `si_age` <span class="keyword">IN</span> (<span class="number">16</span>,<span class="number">18</span>);</span><br><span class="line">#<span class="keyword">null</span>值比较特殊 只能用<span class="keyword">is</span>判断</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `dept_id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line">#表名取别名 </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `dp`.`d_name` <span class="keyword">FROM</span> `department` <span class="keyword">AS</span> `dp`;</span><br></pre></td></tr></tbody></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="无连接，内连接"><a href="#无连接，内连接" class="headerlink" title="无连接，内连接"></a>无连接，内连接</h3><p>都会产生一张占用内存比较多的笛卡尔积表，是不推荐的、</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu`,`department`;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu`<span class="keyword">INNER</span> <span class="keyword">JOIN</span> `department`;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu`<span class="keyword">JOIN</span> `department`;</span><br></pre></td></tr></tbody></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h4 id="左外链接"><a href="#左外链接" class="headerlink" title="左外链接"></a>左外链接</h4><p>以左表为主，查询出左表所有的数据，右表只有符合条件的才会显示，如果没有匹配的以null代替</p><p>查询所有学生的学院，如果该学生没有学院，学院表的值以null代替</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `department` <span class="keyword">AS</span>`dp` <span class="keyword">ON</span> `stu`.`dept_id`<span class="operator">=</span>`dp`.`d_id`;</span><br></pre></td></tr></tbody></table></figure><h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><p>以右表为主，查询出右表所有的数据，左表只有符合条件的才会显示，如果没有匹配的以null代替</p><p>查询所有学院的学生，如果该学院没有学生，学生的值以null代替</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `department` <span class="keyword">AS</span>`dp` <span class="keyword">ON</span> `stu`.`dept_id`<span class="operator">=</span>`dp`.`d_id`;</span><br></pre></td></tr></tbody></table></figure><h4 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h4><p>用于合并两个或者多个查询语句的结果，并会消除结果表中重复的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `department` <span class="keyword">AS</span>`dp` <span class="keyword">ON</span> `stu`.`dept_id`<span class="operator">=</span>`dp`.`d_id`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">UNION</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `department` <span class="keyword">AS</span>`dp` <span class="keyword">ON</span> `stu`.`dept_id`<span class="operator">=</span>`dp`.`d_id`;</span><br></pre></td></tr></tbody></table></figure><p>需要保留重复的数据，在union后面加all</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `department` <span class="keyword">AS</span>`dp` <span class="keyword">ON</span> `stu`.`dept_id`<span class="operator">=</span>`dp`.`d_id` <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu` <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `department` <span class="keyword">AS</span>`d</span><br><span class="line">p` <span class="keyword">ON</span> `stu`.`dept_id`<span class="operator">=</span>`dp`.`d_id`;</span><br></pre></td></tr></tbody></table></figure><h3 id="子表查询"><a href="#子表查询" class="headerlink" title="子表查询"></a>子表查询</h3><p>把查询出来的结果当成条件给到另一个查询语句使用</p><p>查询Java学院的所有学生</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#第一步查询java学院的id</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `d_id` <span class="keyword">FROM</span> `department` <span class="keyword">WHERE</span> `d_name`<span class="operator">=</span><span class="string">'JAVA'</span>;</span><br><span class="line">#第二步 在学生表里面找到该id值对应的学生</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `s_name` <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `dept_id`<span class="operator">=</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `d_id` <span class="keyword">FROM</span> `department` <span class="keyword">WHERE</span> `d_name`<span class="operator">=</span><span class="string">'JAVA'</span>);</span><br></pre></td></tr></tbody></table></figure><p>查询Java学院的所有学生的详情信息</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#第一步查询java学院的id</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `d_id` <span class="keyword">FROM</span> `department` <span class="keyword">WHERE</span> `d_name`<span class="operator">=</span><span class="string">'JAVA'</span>;</span><br><span class="line">#第二步 在学生表里面找到该id值对应的学生</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `s_name` <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `dept_id`<span class="operator">=</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `d_id` <span class="keyword">FROM</span> `department` <span class="keyword">WHERE</span> `d_name`<span class="operator">=</span><span class="string">'JAVA'</span>);</span><br><span class="line"></span><br><span class="line"> mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu_info` <span class="keyword">WHERE</span> `stu_id`<span class="operator">=</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">SELECT</span> `s_id` <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `dept_id`<span class="operator">=</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `d_id` <span class="keyword">FROM</span> `department` <span class="keyword">WHERE</span> `d_name`<span class="operator">=</span><span class="string">'PYTHON'</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ));</span><br></pre></td></tr></tbody></table></figure><p>右外连接多表查询</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查询java学院的id</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `d_id` <span class="keyword">FROM</span> `department` <span class="keyword">WHERE</span> `d_name`<span class="operator">=</span><span class="string">'JAVA'</span>;</span><br><span class="line">#查询java学院的学生id</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `s_id` <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `dept_id`<span class="operator">=</span>( <span class="keyword">SELECT</span> `d_id` <span class="keyword">FROM</span> `department` <span class="keyword">WHERE</span> `d_name`<span class="operator">=</span><span class="string">'JAVA'</span>);</span><br><span class="line">#查询java学院的学生详情信息</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu_info` <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `s_id` <span class="keyword">FROM</span> `stu` <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span>(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `d_id` <span class="keyword">FROM</span> `department` <span class="keyword">WHERE</span> `d_name`<span class="operator">=</span><span class="string">'JAVA'</span>) <span class="keyword">AS</span> `java`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ON</span> `java`.`d_id`<span class="operator">=</span>`stu`.`dept_id`)<span class="keyword">AS</span> `j_stu`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ON</span> `j_stu`.`s_id`<span class="operator">=</span>`stu_info`.`stu_id`;</span><br></pre></td></tr></tbody></table></figure><p>子表查询链接多张表查询，条件用where而且写在下一张表的前面</p><p>外连接查询链接多张表查询，条件用on而且写在下一张的后面，并且，表查询结果需要用as取别名</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>用于保存一张表或多张查询的结果表，是虚拟存在的表，</p><p>数据库只存放了视图的定义，没有存放视图的数据，这些数据存放在原来的表当中。</p><p>视图中的数据依赖于原来的表数据，一旦表中的数据发生改变，试图中的数据也会发生改变</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> `java_info` <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu_info` <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> `s_id` <span class="keyword">FROM</span> `stu` <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> `d_id` <span class="keyword">FROM</span> `department` <span class="keyword">WHERE</span> `d_name`<span class="operator">=</span><span class="string">'JAVA'</span>) <span class="keyword">AS</span> `java`<span class="keyword">ON</span> `java`.`d_id`<span class="operator">=</span>`stu`.`dept_id`)<span class="keyword">AS</span> `j_stu`<span class="keyword">ON</span> `j_stu`.`s_id`<span class="operator">=</span>`stu_info`.`stu_id`;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `java_info`;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">VIEW</span> `java_info`;</span><br></pre></td></tr></tbody></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#默认从小到大</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu_info` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `si_age`;</span><br><span class="line">#反向 在后面添加<span class="keyword">desc</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu_info` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `si_age` <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="限制行数"><a href="#限制行数" class="headerlink" title="限制行数"></a>限制行数</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#第一个参数为下标，第二个参数为限制获取多少行</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu_info` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `si_age` <span class="keyword">DESC</span> LIMIT <span class="number">0</span>,<span class="number">3</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>GROUP BY后面筛选条件不能用where连接，需要用having</p><p>并且条件需要是明确的字典，不能是*</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `d_id`,`d_name`,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> `department` <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `stu`</span><br><span class="line"><span class="keyword">ON</span> `department`.`d_id`<span class="operator">=</span>`stu`.`dept_id` <span class="keyword">GROUP</span> <span class="keyword">BY</span> `d_name` <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#字段处理</span><br><span class="line">#如果该字段的值不为 <span class="keyword">NULL</span>，则返回原表值，否则返回设置的值。</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `dept_id`,IFNULL(`dept_id`,<span class="number">4</span>) <span class="keyword">FROM</span> `stu`;</span><br><span class="line"></span><br><span class="line">#字符串截取  </span><br><span class="line">#对查询的到的结果只获取右边两个字符</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(`s_name`,<span class="number">2</span>) <span class="keyword">FROM</span> `stu`;</span><br><span class="line">#对查询的到的结果只获取左边两个字符</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(`s_name`,<span class="number">2</span>) <span class="keyword">FROM</span> `stu`;</span><br><span class="line">#指定截取范围</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(`s_name`,<span class="number">1</span>,<span class="number">3</span>) <span class="keyword">FROM</span> `stu`;</span><br><span class="line"></span><br><span class="line">#字符串拼接</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> concat(s_name,dept_id)  <span class="keyword">FROM</span> stu;  #拼接名字和id</span><br><span class="line"></span><br><span class="line">#类型转换</span><br><span class="line">#类型转换CAST 字符串类型转换为日期类型</span><br><span class="line"> mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">CAST</span>("2024-03-29" <span class="keyword">AS</span> <span class="type">DATE</span>);</span><br><span class="line"></span><br><span class="line"> #时间函数</span><br><span class="line">  #查看当前时间</span><br><span class="line"> mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> NOW();</span><br></pre></td></tr></tbody></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务就是执行一系列的操作，通过事务让这些操作绑定在一起，要么全部执行，要么全部不执行，变成一个统一的不可分割的工作单位</p><p>转账 A转账给B</p><p>A 支出500 （网络不稳定）</p><p>B 收入500</p><h4 id="MySQL事务处理方法："><a href="#MySQL事务处理方法：" class="headerlink" title="MySQL事务处理方法："></a>MySQL事务处理方法：</h4><p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p><ul><li><strong>BEGIN</strong> 开始一个事务</li><li><strong>ROLLBACK</strong> 事务回滚</li><li><strong>COMMIT</strong> 事务确认</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `id` <span class="type">INT</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `password` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `money` <span class="type">FLOAT</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'JACK'</span>,<span class="string">'123456'</span>,<span class="number">1000</span>),(<span class="number">2</span>,<span class="string">'ROSE'</span>,<span class="string">'456789'</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">BEGIN</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">UPDATE</span> `<span class="keyword">user</span>` <span class="keyword">SET</span> `money`<span class="operator">=</span><span class="number">500</span> <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> password <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> JACK <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span>   <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> ROSE <span class="operator">|</span> <span class="number">456789</span>   <span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ROLLBACK</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> password <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> JACK <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> ROSE <span class="operator">|</span> <span class="number">456789</span>   <span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">UPDATE</span> `<span class="keyword">user</span>` <span class="keyword">SET</span> `money`<span class="operator">=</span><span class="number">500</span> <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">UPDATE</span> `<span class="keyword">user</span>` <span class="keyword">SET</span> `money`<span class="operator">=</span><span class="number">500</span> <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> password <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> JACK <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span>   <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> ROSE <span class="operator">|</span> <span class="number">456789</span>   <span class="operator">|</span>   <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">COMMIT</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> password <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> JACK <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span>   <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> ROSE <span class="operator">|</span> <span class="number">456789</span>   <span class="operator">|</span>   <span class="number">500</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+----------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单表查询&quot;&gt;&lt;a href=&quot;#单表查询&quot; class=&quot;headerlink&quot; title=&quot;单表查询&quot;&gt;&lt;/a&gt;单表查询&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
    <category term="MySql基础入门" scheme="https://bileis.github.io/tags/MySql%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://bileis.github.io/2024/05/17/Redis/"/>
    <id>https://bileis.github.io/2024/05/17/Redis/</id>
    <published>2024-05-17T09:02:07.000Z</published>
    <updated>2024-05-17T09:03:23.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis的基本使用"><a href="#Redis的基本使用" class="headerlink" title="Redis的基本使用"></a>Redis的基本使用</h2><p>启动redis服务</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~$ redis-server</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭服务</span></span><br><span class="line">bd@clem:~$ redis-cli SHUTDOWN</span><br><span class="line">bd@clem:~$ redis-server</span><br></pre></td></tr></tbody></table></figure><p>本地登录</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br></pre></td></tr></tbody></table></figure><p>远程登录</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~$ redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br></pre></td></tr></tbody></table></figure><p>默认的以数字命名的数据库0-15</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">选择5号数据库</span></span><br><span class="line">127.0.0.1:6379&gt; select 5</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">选择0号库</span></span><br><span class="line">127.0.0.1:6379[5]&gt; select 0</span><br></pre></td></tr></tbody></table></figure><p>设置键和值</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置键值对</span></span><br><span class="line">127.0.0.1:6379[5]&gt; SET name lili</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取键保存的值</span></span><br><span class="line">127.0.0.1:6379[5]&gt; GET name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一次性设置多个键值对</span></span><br><span class="line">127.0.0.1:6379[5]&gt; MSET age 18 sex girl</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一次性获取多个键的值</span></span><br><span class="line">127.0.0.1:6379[5]&gt; MGET name age sex</span><br></pre></td></tr></tbody></table></figure><p>查看存在的键</p><p>||| |-|-| |符号|含义| |?|匹配一个字符| |*|匹配任意个（包括0个）字符| |[ ]|匹配括号间的任一字符，可以使用“-”符号表示一个范围，如a[b-d],可以匹配：ab,ac,ad| |\x|匹配字符x，用于转义符号。如要匹配“？”就需要使用?|</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[5]&gt; KEYS *</span><br><span class="line">127.0.0.1:6379[5]&gt; KEYS nam?</span><br></pre></td></tr></tbody></table></figure><p>判断键是否存在</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1代表存在</span></span><br><span class="line">127.0.0.1:6379[5]&gt; EXISTS name</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0代表不存在</span></span><br><span class="line">127.0.0.1:6379[5]&gt; EXISTS name1</span><br><span class="line">(integer) 0</span><br></pre></td></tr></tbody></table></figure><p>键重命名</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[5]&gt; RENAME name name1</span><br></pre></td></tr></tbody></table></figure><p>设置键过期时间</p><p>1、在添加键的时候设置</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[5]&gt; set size 167 ex 20</span><br></pre></td></tr></tbody></table></figure><p>查看键是否存在</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-2代表不存在</span></span><br><span class="line">127.0.0.1:6379[5]&gt; ttl name</span><br><span class="line">(integer) -2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-1代表存在</span></span><br><span class="line">127.0.0.1:6379[5]&gt; ttl name1</span><br><span class="line">(integer) -1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">正数代表还有多久过期</span></span><br><span class="line">127.0.0.1:6379[5]&gt; ttl size</span><br><span class="line">(integer) 4</span><br></pre></td></tr></tbody></table></figure><p>2、键已经存在，再次设置过期时间</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[5]&gt; expire name1 20</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将name设置成永久</span></span><br><span class="line">127.0.0.1:6379&gt; persist name</span><br></pre></td></tr></tbody></table></figure><p>查看键的类型</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[5]&gt; type sex</span><br></pre></td></tr></tbody></table></figure><p>删除键</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[5]&gt; del age</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除的时候 不支持通配符匹配</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果需要通配符筛选，需要退出数据库，在数据库外面写</span></span><br><span class="line">bd@clem:~$ redis-cli -n 5 keys 'n*' | xargs redis-cli -n 5 del</span><br></pre></td></tr></tbody></table></figure><p>清空数据库</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[5]&gt; flushdb</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379[5]&gt; flushall</span><br></pre></td></tr></tbody></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置一个键</span></span><br><span class="line">127.0.0.1:6379&gt; set num 111</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取键的值</span></span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新设置 修改键的值</span></span><br><span class="line">127.0.0.1:6379&gt; set num 222</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对值进行加一</span></span><br><span class="line">127.0.0.1:6379[5]&gt; INCR num</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对值进行减一</span></span><br><span class="line">127.0.0.1:6379[5]&gt; DECR num </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">自定义值的增加</span></span><br><span class="line">127.0.0.1:6379&gt; incrby num 20</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">自定义值的减少</span></span><br><span class="line">127.0.0.1:6379&gt; decrby num 20</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">追加内容</span></span><br><span class="line">127.0.0.1:6379&gt; append num aaa</span><br></pre></td></tr></tbody></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">左边添加</span></span><br><span class="line">127.0.0.1:6379&gt; lpush li 1 2 3 4</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">右边添加</span> </span><br><span class="line">127.0.0.1:6379&gt; rpush li 9 8 7 6</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取列表的全部元素</span></span><br><span class="line">127.0.0.1:6379&gt; lrange li 0 -1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取列表部分内容</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE li 0 2 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">左边删除</span></span><br><span class="line">127.0.0.1:6379&gt; lpop li</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">右边删除</span></span><br><span class="line">127.0.0.1:6379&gt; rpop li</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取列表长度</span></span><br><span class="line">127.0.0.1:6379&gt; llen li</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过下标获取内容</span></span><br><span class="line">127.0.0.1:6379&gt; lindex li 1</span><br><span class="line">127.0.0.1:6379&gt; lindex li -1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpush li a a a a</span><br><span class="line">127.0.0.1:6379&gt; rpush li b b b b</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除列表元素，数量大于0从表头开始向表尾搜索</span></span><br><span class="line">127.0.0.1:6379&gt; lrem li 2 a</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数量小于0从表尾开始向表头搜索</span></span><br><span class="line">127.0.0.1:6379&gt; lrem li -2 a</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数量等于0移除表中所有的a</span></span><br><span class="line">127.0.0.1:6379&gt; lrem li 0 a</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过下标修改内容</span></span><br><span class="line">127.0.0.1:6379&gt; lset li -1 f</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">type</span>查看类型</span></span><br><span class="line">127.0.0.1:6379[5]&gt; type li</span><br></pre></td></tr></tbody></table></figure><h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果字段已经存在于哈希表中，旧值将被覆盖</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一次性添加多个值</span></span><br><span class="line">127.0.0.1:6379&gt; hmset user age 18 sex gril</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取单个字段的值。如果给定的字段或 key 不存在时，返回 nil 。</span></span><br><span class="line">127.0.0.1:6379&gt; hget user name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取多个字段的值</span></span><br><span class="line">127.0.0.1:6379&gt; hmget user name age sex</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取表中的所有字段</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys user</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取表中的所有值</span></span><br><span class="line">127.0.0.1:6379&gt; hvals user</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取表中所有的字段跟值</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取哈希表中字段的数量</span></span><br><span class="line">127.0.0.1:6379&gt; hlen user</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看哈希表的指定字段是否存在</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果哈希表含有给定字段，返回 1 。 如果哈希表不含有给定字段，或 key 不存在，返回 0</span> </span><br><span class="line">127.0.0.1:6379&gt; hexists user name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于为哈希表中不存在的的字段赋值</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置成功，返回 1 。 如果给定字段已经存在且没有操作被执行，返回 0</span></span><br><span class="line">127.0.0.1:6379&gt; hsetnx user size 167</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除数字</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby user age -1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加数字</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby user age 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除字段</span></span><br><span class="line">127.0.0.1:6379&gt; hdel user size</span><br></pre></td></tr></tbody></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加元素</span></span><br><span class="line">127.0.0.1:6379&gt; sadd set1 1 2 3 a b c 1 2 3</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看集合内所有的元素</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除指定元素</span></span><br><span class="line">127.0.0.1:6379[5]&gt; SREM set1 3</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">随机删除集合内两个元素</span></span><br><span class="line">127.0.0.1:6379&gt; spop set1 2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">随机删除一个元素后面不用写数字</span></span><br><span class="line">127.0.0.1:6379&gt; spop set1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断元素是不是集合的成员 返回0不存在 返回1存在</span></span><br><span class="line">127.0.0.1:6379&gt; sismember set1 a</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取元素个数</span></span><br><span class="line">127.0.0.1:6379&gt; scard set1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">随机获取两个元素 整数不会重复</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember set1 2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">随机获取两个元素 ，负数会重复</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember set1 -2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">inter： 返回给定所有集合的交集</span> </span><br><span class="line">127.0.0.1:6379&gt; sinter set1 set2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">interstore： 返回给定所有集合的交集并存储在 指定的集合中</span> </span><br><span class="line">127.0.0.1:6379&gt; sinterstore set3 set2 set1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">union 返回两个集合的交集</span></span><br><span class="line">127.0.0.1:6379&gt; sunion set1 set2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">unionstore 返回两个集合的交集并存储在 指定的集合中</span></span><br><span class="line">127.0.0.1:6379&gt; sunionstore set4 set1 set2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以第一个集合为主，找到后面集合中没有前面集合的元素</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff set2 set1</span><br></pre></td></tr></tbody></table></figure><h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加元素</span></span><br><span class="line">127.0.0.1:6379&gt; zadd math 99 lisa 95 rose 86 lili 78 jack 75 dundun 68 daiwei 60 zhansan 54 lisi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看元素个数</span></span><br><span class="line">127.0.0.1:6379&gt; zcard math</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看指定成员的分数</span></span><br><span class="line">127.0.0.1:6379&gt; zscore math rose</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看指定成员的分数，不是这个集合的成员，则返回nil</span></span><br><span class="line">127.0.0.1:6379&gt; zscore math wangwu</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看该集合所有的成员跟分数 分数从小到大进行排序</span></span><br><span class="line">127.0.0.1:6379&gt; zrange math 0 -1 withscores</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看该集合所有的成员跟分数 分数从大到小进行排序</span></span><br><span class="line">127.0.0.1:6379&gt; zrevrange math 0 -1 withscores</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除元素</span></span><br><span class="line">127.0.0.1:6379&gt; zrem math lisa</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加某个元素的分数</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY MATH 10 lili</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">减少某个元素的分数</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY MATH 10 lili</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取分数在60-90范围内的成员</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore math 60 90 withscores</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取分数在60-90范围内的成员，不取60</span></span><br><span class="line">127.0.0.1:6379[5]&gt; ZRANGEBYSCORE MATH (60 90 WITHSCORES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据分数删除，删除60-80的成员</span></span><br><span class="line">127.0.0.1:6379&gt; zremrangebyscore math 60 80</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据排名删除，从小到大排序删除下标2跟下标3的成员</span></span><br><span class="line">127.0.0.1:6379&gt; zremrangebyrank math 2 3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zinterstore zset3 2 zset1 zset2</span><br><span class="line">127.0.0.1:6379&gt; zunionstore zset5 2 zset1 zset2</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis的基本使用&quot;&gt;&lt;a href=&quot;#Redis的基本使用&quot; class=&quot;headerlink&quot; title=&quot;Redis的基本使用&quot;&gt;&lt;/a&gt;Redis的基本使用&lt;/h2&gt;&lt;p&gt;启动redis服务&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
    <category term="Redis介绍与使用" scheme="https://bileis.github.io/tags/Redis%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>MySql表关系</title>
    <link href="https://bileis.github.io/2024/03/29/MySql%E8%A1%A8%E5%85%B3%E7%B3%BB/"/>
    <id>https://bileis.github.io/2024/03/29/MySql%E8%A1%A8%E5%85%B3%E7%B3%BB/</id>
    <published>2024-03-29T10:16:54.000Z</published>
    <updated>2024-03-29T10:27:44.515Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://flowus.cn/preview/a9001f04-20e0-4126-bf4d-e037dee5ff77" alt="image.png"></p><h3 id="1、一对多关系"><a href="#1、一对多关系" class="headerlink" title="1、一对多关系"></a>1、一对多关系</h3><p>一对多：一个学院里面可以有很多个学生，多个学生都可以报名同一个学院，这就是一对多的关系，一个学院，多个学生。</p><p><strong>一对多是最基础的表关系，表A的一条数据可以对应表B中多条数据，表B的一条数据对应表A的一条数据</strong></p><p><strong>添加数据：先添加父表在添加子表，比如先添加学院，再添加学生</strong></p><p><strong>删除数据：先删除子表，再删除父表，先开除或者转学院学生，再删除学院</strong></p><p><strong>一对多，两张表，多的表加外键：</strong></p><h4 id="学院表"><a href="#学院表" class="headerlink" title="学院表"></a>学院表</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `department`(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `d_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,#主键约束</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `d_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,非空</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">CONSTRAINT</span> `na_uni` <span class="keyword">UNIQUE</span>(`d_name`));#唯一</span><br></pre></td></tr></tbody></table></figure><h4 id="学生表"><a href="#学生表" class="headerlink" title="学生表"></a>学生表</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `stu`(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `s_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `s_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `dept_id` <span class="type">INT</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOREIGN</span> KEY(`dept_id`)<span class="keyword">REFERENCES</span> `department`(`d_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>);</span><br><span class="line">#删除学院表的信息时，学生表对应的该条数据的字段值设置为空</span><br></pre></td></tr></tbody></table></figure><p>添加数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `department` <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'JAVA'</span>),(<span class="number">2</span>,<span class="string">'PY THON'</span>),(<span class="number">3</span>,<span class="string">'HTML'</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `stu` (`s_name`,`dept_id`)<span class="keyword">VALUES</span>(<span class="string">'li sa'</span>,<span class="number">1</span>),(<span class="string">'lili'</span>,<span class="number">2</span>),(<span class="string">'rose'</span>,<span class="number">1</span>),(<span class="string">'jack'</span>,<span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure><p>删除数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> `department` <span class="keyword">WHERE</span> `d_id`<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `department`;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> d_id <span class="operator">|</span> d_name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> JAVA   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> PYTHON <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu`;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> s_id <span class="operator">|</span> s_name <span class="operator">|</span> dept_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+---------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> lisa   <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> lili   <span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> rose   <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> jack   <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+---------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></tbody></table></figure><h3 id="2、一对一关系"><a href="#2、一对一关系" class="headerlink" title="2、一对一关系"></a>2、一对一关系</h3><p>一对一：一个学生只有对应的一个详细信息，一个学生详细信息只关联一个学生，这就是一对一的关系，一个学生，一个详细信息。</p><p><strong>唯一外键：一对一关系推荐的方法，给某个表添加外键，但是该外键必须要有唯一性约束，该外键不能有重复</strong></p><h4 id="学生详情表"><a href="#学生详情表" class="headerlink" title="学生详情表"></a>学生详情表</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `stu_info`(</span><br><span class="line">  `si_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  `si_age` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>, </span><br><span class="line">  `si_sex` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">'man'</span>, </span><br><span class="line">  `si_phone` <span class="type">CHAR</span>(<span class="number">11</span>) <span class="keyword">UNIQUE</span> KEY, </span><br><span class="line">  `stu_id` <span class="type">INT</span> <span class="keyword">UNIQUE</span> KEY, </span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY (`stu_id`) <span class="keyword">REFERENCES</span> `stu`(`s_id`) </span><br><span class="line">  <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE);</span><br></pre></td></tr></tbody></table></figure><p>添加数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span>`stu_info`(`si_age`,`si_sex`,`si_phone`,`stu_id`)<span class="keyword">VALUES</span>(<span class="number">17</span>,<span class="string">'woman'</span>,<span class="string">'12345678945'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `stu_info`(`si_age`,`si_sex`,`si_phone`,`stu_id`)<span class="keyword">VALUES</span>(<span class="number">18</span>,<span class="string">'woman'</span>,<span class="string">'12345674545'</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `stu_info`(`si_age`,`si_sex`,`si_pho ne`,`stu_id`)<span class="keyword">VALUES</span>(<span class="number">18</span>,<span class="string">'man'</span>,<span class="string">'12345645545'</span>,<span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure><p>删除数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> `stu` <span class="keyword">WHERE</span> `s_id`<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu_info`;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+--------+-------------+--------+</span></span><br><span class="line"><span class="operator">|</span> si_id <span class="operator">|</span> si_age <span class="operator">|</span> si_sex <span class="operator">|</span> si_phone    <span class="operator">|</span> stu_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+--------+-------------+--------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>     <span class="number">17</span> <span class="operator">|</span> woman  <span class="operator">|</span> <span class="number">12345678945</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span>     <span class="number">18</span> <span class="operator">|</span> woman  <span class="operator">|</span> <span class="number">12345674545</span> <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span>     <span class="number">18</span> <span class="operator">|</span> man    <span class="operator">|</span> <span class="number">12345645545</span> <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+--------+-------------+--------+</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3、多对多关系"><a href="#3、多对多关系" class="headerlink" title="3、多对多关系"></a>3、多对多关系</h3><p>多对多：一个学生可以选修多个课程，一个课程也可以被多个学生选修，</p><p>但是多对多的关系要通过一个中间表的方式去处理，将多对多的关系转化为两个一对多。</p><p><strong>需要额外创建一个关系表俩存放两张表的id值</strong></p><p>学生表跟关系表是一对多，课程表跟关系表也是一对多的关系</p><p><strong>添加数据：先添加父表记录，在添加子表记录，先添加学生或者课程，再添加学生的选课记录</strong></p><p><strong>删除数据：先删除子表记录在删除父表记录，先删除选课记录，再删除学生或者课程</strong></p><p><strong>多对多，三张表，关系表添加外键：多对多关系，需要设计第三张关系表设计，关系表就是存放了多对多关系两张表的外键</strong></p><h4 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `course`( `c_id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, `c_name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> KEY);</span><br></pre></td></tr></tbody></table></figure><h4 id="学生课程关系表"><a href="#学生课程关系表" class="headerlink" title="学生课程关系表"></a>学生课程关系表</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  `stu_course`(</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> `s_id` <span class="type">INT</span>,`c_id` <span class="type">INT</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">PRIMARY</span> KEY(`s_id`,`c_id`),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOREIGN</span> KEY(`s_id`) <span class="keyword">REFERENCES</span> `stu`(`s_id`),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FOREIGN</span> KEY(`c_id`) <span class="keyword">REFERENCES</span> `course`(`c_id`));</span><br></pre></td></tr></tbody></table></figure><p>添加数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `course` (`c_name`)<span class="keyword">VALUES</span>(<span class="string">'music'</span>),( <span class="string">'sport'</span>),(<span class="string">'art'</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `stu_course` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">1</span> ),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p>删除数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> `course` <span class="keyword">WHERE</span> `c_id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">ERROR <span class="number">1451</span> (<span class="number">23000</span>): Cannot <span class="keyword">delete</span> <span class="keyword">or</span> <span class="keyword">update</span> a parent <span class="type">row</span> (`test`.`stu_course`, <span class="keyword">CONSTRAINT</span> `stu_course_ibfk_2` FOourse` (`c_id`))</span><br></pre></td></tr></tbody></table></figure><h2 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h2><h4 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式 - 1NF"></a>第一范式 - 1NF</h4><p>遵循原子性。即，<strong>表中字段的数据，不可以再拆分</strong></p><p>不符合第一范式的表结构</p><table><thead><tr><th>学生id</th><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td>001</td><td>python学院小张</td><td>18</td></tr><tr><td>002</td><td>mysql学院小黄</td><td>20</td></tr><tr><td>003</td><td>HTML学院小高</td><td>22</td></tr></tbody></table><p>再进行拆分，符合第一范式</p><table><thead><tr><th>学生id</th><th>学院</th><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td>001</td><td>python学院</td><td>小张</td><td>18</td></tr><tr><td>002</td><td>mysql学院</td><td>小黄</td><td>20</td></tr><tr><td>003</td><td>HTML学院</td><td>小高</td><td>22</td></tr></tbody></table><h3 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式 - 2NF"></a>第二范式 - 2NF</h3><p>在满足第一范式的情况下，遵循唯一性，消除部分依赖。即，<strong>表中任意一个主键或任意一组联合主键，可以确定除该主键外的所有的非主键值。</strong></p><p>再通俗点讲就是，<strong>一个表只能描述一件事情</strong>。</p><table><thead><tr><th>学号</th><th>姓名</th><th>年龄</th><th>课程名称</th><th>成绩</th><th>学分</th></tr></thead><tbody><tr><td>001</td><td>小张</td><td>28</td><td>语文</td><td>90</td><td>3</td></tr><tr><td>001</td><td>小张</td><td>28</td><td>数学</td><td>90</td><td>2</td></tr><tr><td>002</td><td>小黄</td><td>25</td><td>语文</td><td>90</td><td>3</td></tr><tr><td>002</td><td>小黄</td><td>25</td><td>语文</td><td>90</td><td>3</td></tr><tr><td>003</td><td>小高</td><td>22</td><td>数学</td><td>90</td><td>2</td></tr></tbody></table><ol><li>假设学号是表中的唯一主键，那由学号就可以确定姓名和年龄了，但是却不能确定课程名称和成绩。</li><li>假设课程名称是表中的唯一主键，那由课程名称就可以确定学分了，但是却不能确定姓名、年龄和成绩。</li><li>虽然通过学号和课程名称的联合主键，可以确定除联合主键外的所有的非主键值，但是基于上述两个假设，也不符合第二范式的要求。</li></ol><p><strong>基于上述的三种主键的可能，拆分成 3 张表，保证一张表只描述一件事情</strong></p><ol><li>学生表 - 学号做主键</li></ol><table><thead><tr><th>学号</th><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td>001</td><td>小张</td><td>28</td></tr><tr><td>002</td><td>小黄</td><td>25</td></tr><tr><td>003</td><td>小高</td><td>22</td></tr></tbody></table><ol><li>课程表 - 课程名称做主键</li></ol><table><thead><tr><th>课程名称</th><th>学分</th></tr></thead><tbody><tr><td>语文</td><td>3</td></tr><tr><td>数学</td><td>2</td></tr></tbody></table><ol><li>成绩表 - 学号和课程名称做联合主键</li></ol><table><thead><tr><th>学号</th><th>课程名称</th><th>成绩</th></tr></thead><tbody><tr><td>001</td><td>语文</td><td>90</td></tr><tr><td>001</td><td>数学</td><td>90</td></tr><tr><td>002</td><td>语文</td><td>90</td></tr><tr><td>002</td><td>语文</td><td>90</td></tr><tr><td>003</td><td>数学</td><td>90</td></tr></tbody></table><p><strong>不遵循第二范式会造成什么样的后果呢</strong></p><ol><li>造成整表的数据冗余</li><li>更新数据不方便。</li><li>插入数据不方便或产生异常。</li></ol><h3 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式 - 3NF"></a>第三范式 - 3NF</h3><p>在满足第二范式的情况下，消除传递依赖。即，<strong>在任一主键都可以确定所有非主键字段值的情况下，不能存在某非主键字段 A 可以获取 某非主键字段 B</strong>。只能通过主键找到，而不是通过主键找到其他字段，再由其他字段找到该字段，可以通过该学生的学号找到班级，再通过班级找到这个班级的班主任。就有一个传递依赖在。</p><table><thead><tr><th>学号</th><th>姓名</th><th>班级</th><th>班主任</th></tr></thead><tbody><tr><td>001</td><td>小黄</td><td>一年级（1）班</td><td>高老师</td></tr></tbody></table><p>学号是主键，它可以唯一确定姓名、班级、班主任，符合了第二范式，但是在非主键字段中，我们也可以通过班级推导出该班级的班主任，所以它是不符合第三范式的。</p><p>符合第三范式</p><ol><li>学生表</li></ol><table><thead><tr><th>学号</th><th>姓名</th><th>班级</th></tr></thead><tbody><tr><td>001</td><td>小黄</td><td>一年级（1）班</td></tr></tbody></table><ol><li>班级表</li></ol><table><thead><tr><th>班级</th><th>班主任</th></tr></thead><tbody><tr><td>一年级（1）班</td><td>高老师</td></tr></tbody></table><p>通过把班级与班主任的映射关系另外做成一张映射表，我们就成功地消除了表中的传递依赖了。</p><p>总结：</p><ul><li>第一范式（1 NF）：字段不可再拆分。</li><li>第二范式（2 NF）：表中任意一个主键或任意一组联合主键，可以确定除该主键外的所有的非主键值。</li><li>第三范式（3 NF）：在任一主键都可以确定所有非主键字段值的情况下，不能存在某非主键字段 A 可以获取 某非主键字段 B</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://flowus.cn/preview/a9001f04-20e0-4126-bf4d-e037dee5ff77&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、一对多关系&quot;&gt;&lt;a href=&quot;#1、一对多关系&quot; class=</summary>
      
    
    
    
    
    <category term="MySql基础入门" scheme="https://bileis.github.io/tags/MySql%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>MySql表约束</title>
    <link href="https://bileis.github.io/2024/03/29/MySql%E8%A1%A8%E7%BA%A6%E6%9D%9F/"/>
    <id>https://bileis.github.io/2024/03/29/MySql%E8%A1%A8%E7%BA%A6%E6%9D%9F/</id>
    <published>2024-03-29T10:14:52.000Z</published>
    <updated>2024-03-29T10:16:17.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `stu` (`id`) <span class="keyword">VALUES</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `stu`;</span><br><span class="line">#添加非空约束</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `stu` MODIFY `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">#如果表数据该字段的值已经有空值，两个内容就会有冲突会报错，添加失败</span><br><span class="line">ERROR <span class="number">1138</span> (<span class="number">22004</span>): Invalid use <span class="keyword">of</span> <span class="keyword">NULL</span> <span class="keyword">value</span></span><br><span class="line">#要么把该条数据删除，要么更新该条数据，把该字段添加上内容</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">UPDATE</span> `stu` <span class="keyword">SET</span> `name`<span class="operator">=</span><span class="string">'lili'</span>;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `stu` MODIFY `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">#表约束添加成功后，对表数据进行修改就需要遵循已经添加的规则</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `stu` (`id`) <span class="keyword">VALUES</span>(<span class="number">2</span>);</span><br><span class="line">ERROR <span class="number">1364</span> (HY000): Field <span class="string">'name'</span> doesn<span class="string">'t have a default value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; INSERT INTO `stu` (`id`,`name`) VALUES(2,'</span>LISA<span class="string">');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql&gt; INSERT INTO `stu` (`id`,`name`) VALUES(2,'</span>LISA<span class="string">');</span></span><br><span class="line"><span class="string">Query OK, 1 row affected (0.00 sec)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#删除非空约束</span></span><br><span class="line"><span class="string">mysql&gt; alter table `stu` modify `name` varchar(20);</span></span><br></pre></td></tr></tbody></table></figure><h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#添加唯一约束</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` <span class="keyword">add</span> <span class="keyword">unique</span> `id_uni`(`id`);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> `stu`(`id`,`name`)<span class="keyword">value</span>(<span class="number">1</span>,<span class="string">'rose'</span>);</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">'1'</span> <span class="keyword">for</span> key <span class="string">'stu.id_uni'</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> `stu`(`id`,`name`)<span class="keyword">value</span>(<span class="number">3</span>,<span class="string">'rose'</span>);</span><br><span class="line"></span><br><span class="line">#删除唯一约束</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` <span class="keyword">drop</span> key `id_uni`;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://flowus.cn/preview/7872cd37-e2b2-44ab-bf4e-acab63b8ce76" alt="image.png"></p><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><p>给表数据添加唯一标识，以及跟其他有关联的表建立联系，方便对表数据进行操作</p><p>主键约束的特点</p><ol><li>唯一和非空</li><li>一张表里面只能有一个主键约束</li></ol><p>如果一张表里面同时需要有多个字段拥有非空和唯一的约束，那么只能有一个字段为主键，其他的字段只是拥有这两个约束</p><p>情况一：表已经指定了主键约束，那么添加非空+唯一，只是拥有者两个约束，并不会被当成主键（白月光在身边）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#添加主键约束<span class="keyword">alter</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` <span class="keyword">add</span> <span class="keyword">primary</span> key(`id`);</span><br><span class="line">#删除主键约束，会保留非空约束</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br><span class="line">#手动删除非空约束</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` modify `id` <span class="type">int</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `stu` MODIFY `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` <span class="keyword">add</span> <span class="keyword">unique</span> `na_uni`(`name`);</span><br></pre></td></tr></tbody></table></figure><p>情况二：如果表没有定义主键，添加非空+唯一约束（替身女二），会默认把这个字段当成主键（白月光出国），后面再添加主键（白月光回国），会变回非空+唯一</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `stu` MODIFY `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` <span class="keyword">add</span> <span class="keyword">unique</span> `na_uni`(`name`);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` <span class="keyword">add</span> <span class="keyword">primary</span> key(`id`);</span><br></pre></td></tr></tbody></table></figure><h2 id="自增约束"><a href="#自增约束" class="headerlink" title="自增约束"></a>自增约束</h2><p>自增约束只能给主键（伪装）设置并且一张表</p><p>只能存在一个</p><p>但是自增长分不清伪装主键和真实主键</p><p>如果先给伪装主键（年龄字段）添加上自增约束，主键（ID字段）则不能再添加，如果需要给主键添加自增约束，则需要把已经给年龄字段添加上的自增约束删除，才能再次添加</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `stu` MODIFY `age` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` <span class="keyword">add</span> <span class="keyword">unique</span> `age_uni`(`age`);</span><br><span class="line">#伪装主键添加自增约束</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` change `age` `age` <span class="type">int</span> auto_increment;</span><br><span class="line"></span><br><span class="line">#主键添加自增约束</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `stu` change `id` `id` <span class="type">int</span> auto_increment;</span><br><span class="line"></span><br><span class="line">#删除自增约束</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `student`change `id` `id` <span class="type">int</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h2><p>情况一：表里面已经有性别字段，通过modify添加默认约束</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `student` modify `sex` <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">default</span> <span class="string">'man'</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `student` modify sex <span class="type">char</span>(<span class="number">11</span>);</span><br></pre></td></tr></tbody></table></figure><p>情况二：表里面没有学院字段，通过add添加字段和默认约束</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> `department` <span class="type">varchar</span>(<span class="number">55</span>) <span class="keyword">default</span> <span class="string">'python'</span>;</span><br><span class="line">#修改表学院字段 删除默认约束</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">alter</span> department <span class="keyword">drop</span> <span class="keyword">default</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> `student` modify `department` <span class="type">varchar</span>(<span class="number">55</span>) ;</span><br></pre></td></tr></tbody></table></figure><p>在创建表时同时建立好表约束</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> `stu_test`( </span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, </span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span> age <span class="type">int</span> <span class="keyword">default</span> <span class="number">18</span>, phone <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">unique</span></span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span>) auto_increment<span class="operator">=</span><span class="number">10</span>,charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;非空约束&quot;&gt;&lt;a href=&quot;#非空约束&quot; class=&quot;headerlink&quot; title=&quot;非空约束&quot;&gt;&lt;/a&gt;非空约束&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
    <category term="MySql基础入门" scheme="https://bileis.github.io/tags/MySql%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux的Shell介绍</title>
    <link href="https://bileis.github.io/2024/03/29/Linux%E7%9A%84Shell%E4%BB%8B%E7%BB%8D/"/>
    <id>https://bileis.github.io/2024/03/29/Linux%E7%9A%84Shell%E4%BB%8B%E7%BB%8D/</id>
    <published>2024-03-29T10:06:55.000Z</published>
    <updated>2024-03-29T10:07:54.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文本传输"><a href="#文本传输" class="headerlink" title="文本传输"></a>文本传输</h2><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">管道符的作用为连接前后两条命令</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">xargs的作用是把前面命令的结果作为后面命令的参数</span></span><br><span class="line">find -name '*.py' | xargs grep print</span><br></pre></td></tr></tbody></table></figure><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>改变输入源，标准输入源可以不用来自键盘，而是来自文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~/py_case$ wc -l main.py</span><br><span class="line">16 main.py</span><br><span class="line">bd@clem:~/py_case$ wc -l &lt; main.py</span><br><span class="line">16</span><br></pre></td></tr></tbody></table></figure><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>改变输出源，标准输出源可以不是显示器，而是输出到指定的文件中</p><p>可以快速给一个文件添加内容</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span>输出</span></span><br><span class="line">bd@clem:~/py_case$ echo lili</span><br><span class="line">lili</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定输出到aaa文件</span></span><br><span class="line">bd@clem:~/py_case$ echo lili &gt; aaa.txt</span><br><span class="line">bd@clem:~/py_case$ cat aaa.txt</span><br><span class="line">lili</span><br><span class="line">bd@clem:~/py_case$ echo lisa &gt; aaa.txt#一个&gt;号会覆盖内容</span><br><span class="line">bd@clem:~/py_case$ cat aaa.txt</span><br><span class="line">lisa</span><br><span class="line">bd@clem:~/py_case$ echo lisa &gt;&gt; aaa.txt#在内容后面追加</span><br><span class="line">bd@clem:~/py_case$ cat aaa.txt</span><br><span class="line">lisa</span><br><span class="line">lisa</span><br></pre></td></tr></tbody></table></figure><h3 id="输出到终端"><a href="#输出到终端" class="headerlink" title="输出到终端"></a>输出到终端</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~/py_case$ tty</span><br><span class="line">/dev/pts/0</span><br><span class="line">bd@clem:~/py_case$ who</span><br><span class="line">bd       pts/0        2024-03-20 20:06 (10.0</span><br><span class="line">bd       pts/1        2024-03-20 20:25 (10.0</span><br><span class="line">bd@clem:~/py_case$ who am i</span><br><span class="line">bd       pts/0        2024-03-20 20:06 (10.0</span><br><span class="line">bd@clem:~/py_case$ echo hello &gt; /dev/pts/1</span><br><span class="line">bd@clem:~/py_case$ hi</span><br><span class="line">bd@clem:~/py_case$</span><br></pre></td></tr></tbody></table></figure><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看别名</span></span><br><span class="line">bd@clem:~/py_case$ alias ll</span><br><span class="line">alias ll='ls -alF'</span><br><span class="line">bd@clem:~/py_case$ type ll</span><br><span class="line">ll is aliased to `ls -alF`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建临时别名</span></span><br><span class="line">bd@clem:~/py_case/test$ alias cdt='cd test'</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除别名</span></span><br><span class="line">bd@clem:~/py_case/test$ unalias cdt</span><br></pre></td></tr></tbody></table></figure><h3 id="永久定义别名"><a href="#永久定义别名" class="headerlink" title="永久定义别名"></a>永久定义别名</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd </span><br><span class="line">vim .bashrc</span><br><span class="line">source .bashrc</span><br></pre></td></tr></tbody></table></figure><p><img src="https://flowus.cn/preview/3a898911-1cb1-4870-a05c-46665c90920a" alt="img"></p><h3 id="文件打包"><a href="#文件打包" class="headerlink" title="文件打包"></a>文件打包</h3><p><code>tar</code>命令用于将文件打包或解包，扩展名一般为<code>.tar</code>,指定特定参数可以调用<code>gzip</code>或<code>bzip2</code>制作压缩包或解开压缩包</p><ul><li>-c 建立新的压缩包 这个一定要</li><li>-x 解压压缩包</li><li>-f 使用压缩包的名字，f参数之后不能再加参数</li><li>-i 忽略存档中的0字块</li><li>-v 处理过程中输出相关信息</li><li>-z 调用gzip来压缩归档文件，与-x联用时调用gzip完成解压缩</li><li>-j 调用bzip2压缩或解压</li><li>-p 使用源文件的原来属性</li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件打包</span></span><br><span class="line">tar -cvf test.tar aa.py bb.py c.py dd.py ff.py</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件包解包</span></span><br><span class="line">tar -xvf test.tar</span><br></pre></td></tr></tbody></table></figure><h3 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用gzip打包并压缩</span></span><br><span class="line">tar -zcvf test.tar.gz aa.py bb.py c.py dd.py ff.py</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf test.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用bzip2打包并压缩</span></span><br><span class="line">tar -jcvf test.tar.bz2 aa.py bb.py c.py dd.py ff.py</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">tar -jxvf test.tar.bz2 </span><br></pre></td></tr></tbody></table></figure><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><p>链接:连接、映射（一一对应）</p><p>硬链接：创建一个文件与指定的文件进行关联同步 备份操作</p><p>命令：ln</p><p>功能：可以进行备份，会与指定的文件进行关联，更新其中一个另外一个也会更新，会创建一个真实存在的文件。占据内存，一个文件会占据双倍的内存</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">创建硬链接 硬链接生成的文件后缀名可以是任意的，hard只是为了区分他是一个链接文件</span></span><br><span class="line">bd@clem:~/test$ ln a.py p.hard</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">链接会随着文件内容一起变化</span></span><br><span class="line">bd@clem:~/test$ echo lili &gt;&gt;a.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改链接也会修改文件</span></span><br><span class="line">bd@clem:~/test$ echo lisa &gt;&gt;p.hard</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除原本的文件</span></span><br><span class="line">bd@clem:~/test$ rm a.py</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">硬链接出来的文件还是会存在</span></span><br><span class="line">bd@clem:~/test$ ls</span><br><span class="line">demo.py  p.hard</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过<span class="built_in">cp</span>复制文件</span></span><br><span class="line">bd@clem:~/test$ cp p.hard a.py</span><br><span class="line">bd@clem:~/test$ ls</span><br><span class="line">a.py  demo.py  p.hard</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">复制后的文件跟链接文件没有链接关系</span></span><br><span class="line">bd@clem:~/test$ echo 789 &gt;&gt; a.py</span><br><span class="line">bd@clem:~/test$ cat a.py</span><br><span class="line">lili</span><br><span class="line">lisa</span><br><span class="line">456</span><br><span class="line">789</span><br><span class="line">bd@clem:~/test$ cat p.hard</span><br><span class="line">lili</span><br><span class="line">lisa</span><br><span class="line">456</span><br></pre></td></tr></tbody></table></figure><h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h3><p>可以理解为快捷方式，生成一个链接文件，不会占用磁盘空间，生成在桌面上的快捷方式是不会占用内存的，删除原本的文件之后，生成的就不能使用了</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">bd@clem:~/test$ ln -s a.py b.hard</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">链接会随着文件内容一起变化</span></span><br><span class="line">bd@clem:~/test$ echo hello &gt;&gt; a.py</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改链接也会修改文件</span></span><br><span class="line">bd@clem:~/test$ echo hello &gt;&gt; b.hard</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除原文件软连接文件同步内容会被清空</span></span><br><span class="line">bd@clem:~/test$ rm a.py</span><br></pre></td></tr></tbody></table></figure><p>软硬链接区别：</p><p>硬链接文件占用空间，软连接文件不会占用</p><p>删除原文件后硬链接文件内容不会改变，软连接文件同步内容会被清空</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h5 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h5><blockquote><p><a href="http://www.cnblogs.com/vamei/archive/2012/09/20/2694466.html">进程</a>是程序的一个具体实现。大家可以简单的理解为进程就是正在进行中的程序。一般来说，一个程序就是一个进程，但是很多情况下，程序为了完成更多的事情，往往一个程序有多个进程。</p></blockquote><p><code>ps</code>提供进程的一次性查看</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u 按用户和启动时间的顺序来显示进程</span><br><span class="line">a 显示所有用户的所有进程</span><br><span class="line">x 显示无终端控制的进程</span><br><span class="line">f 列出进程全部相关信息，通常和其他选项联用</span><br><span class="line">e 所有进程</span><br><span class="line">l 采用详细的格式来显示程序状况</span><br><span class="line">ps -aux # 查看所有进程</span><br><span class="line">ps -aux|grep python # 使用管道符筛选，只查看python相关进程</span><br><span class="line">kill -9</span><br></pre></td></tr></tbody></table></figure><h2 id="Shell简介"><a href="#Shell简介" class="headerlink" title="Shell简介"></a>Shell简介</h2><p>交互模式</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo hello</span><br><span class="line">echo $SHELL #查看当前使用的shell版本是什么</span><br></pre></td></tr></tbody></table></figure><p>编辑模式</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim lili.sh #文件存在自己打开 文件不存在则创建新文件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash <span class="comment">#声明当前使用的解释器</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">this is <span class="built_in">test</span></span></span><br><span class="line">echo "Hello Shell"</span><br><span class="line">echo $0 #代表文件本身</span><br><span class="line">echo $1 #是具体的参数</span><br><span class="line">echo $2</span><br></pre></td></tr></tbody></table></figure><p>执行脚本文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ash lili.sh#bash执行脚本文件不带参数</span><br><span class="line">bash lili.sh lili lisa #bash 带参数 lili传给$1 lisa传给$2 执行脚本文件</span><br><span class="line">ls -l#查看脚本文件的权限</span><br><span class="line">chmod u+x lili.sh#给当前用户添加可执行权限，可以通过路径直接运行该文件</span><br><span class="line">./lili.sh</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文本传输&quot;&gt;&lt;a href=&quot;#文本传输&quot; class=&quot;headerlink&quot; title=&quot;文本传输&quot;&gt;&lt;/a&gt;文本传输&lt;/h2&gt;&lt;h3 id=&quot;管道符&quot;&gt;&lt;a href=&quot;#管道符&quot; class=&quot;headerlink&quot; title=&quot;管道符&quot;&gt;&lt;/a&gt;管道</summary>
      
    
    
    
    
    <category term="Linux基础" scheme="https://bileis.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Git问题解决</title>
    <link href="https://bileis.github.io/2024/03/18/Git%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://bileis.github.io/2024/03/18/Git%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2024-03-18T14:30:44.000Z</published>
    <updated>2024-03-18T14:34:10.318Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-Git解决fatal-Could-not-read-from-remote-repository-的问题"><a href="#1-Git解决fatal-Could-not-read-from-remote-repository-的问题" class="headerlink" title="1.Git解决fatal: Could not read from remote repository.的问题"></a>1.Git解决fatal: Could not read from remote repository.的问题</h5><p>因为git仓库的用户信息和本地的用户信息不匹配造成的，解决方法也很简单，在git仓库中删除当前用户配置的key后重新生成并配置即可；</p><p>执行ssh-keygen –t rsa –C “git仓库邮箱”，重新生成密钥；</p><p>执行git config –global user.name “git用户名”，重新配置本地用户名；</p><p>执行git config –global user.email “git登录邮箱”，重新配置本地邮箱；</p><p>之后将生成在C:\Users\用户名.ssh文件夹下的id_rsa.pub文件打开后复制到Git仓库设置—SSH配置—Key配置的地方粘贴即可，如下图所示：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1-Git解决fatal-Could-not-read-from-remote-repository-的问题&quot;&gt;&lt;a href=&quot;#1-Git解决fatal-Could-not-read-from-remote-repository-的问题&quot; class=&quot;hea</summary>
      
    
    
    
    
    <category term="Git所遇问题汇总" scheme="https://bileis.github.io/tags/Git%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux基本使用</title>
    <link href="https://bileis.github.io/2024/03/18/Linux%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://bileis.github.io/2024/03/18/Linux%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2024-03-18T14:06:01.000Z</published>
    <updated>2024-03-18T14:15:48.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux基础使用"><a href="#Linux基础使用" class="headerlink" title="Linux基础使用"></a>Linux基础使用</h2><h3 id="Ubuntu软件下载"><a href="#Ubuntu软件下载" class="headerlink" title="Ubuntu软件下载"></a>Ubuntu软件下载</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#下载插件</span><br><span class="line">bd@clem:~$ sudo apt install oneko</span><br><span class="line">#卸载插件</span><br><span class="line">bd@clem:~$ sudo apt remove oneko</span><br></pre></td></tr></tbody></table></figure><h3 id="Python第三库-模块-下载"><a href="#Python第三库-模块-下载" class="headerlink" title="Python第三库(模块)下载"></a>Python第三库(模块)下载</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#切换当前环境</span><br><span class="line">bd@clem:~$ workon py3env</span><br><span class="line">#下载python第三库</span><br><span class="line">(py3env) bd@clem:~$ pip install requests</span><br><span class="line">#换源下载</span><br><span class="line">(py3env) bd@clem:~$ pip install requests -i https://pypi.douban.com/simple</span><br><span class="line">#卸载第三库</span><br><span class="line">(py3env) bd@clem:~$ pip uninstall requests</span><br><span class="line">#查看已经下载安装的模块</span><br><span class="line">(py3env) bd@clem:~$ pip list</span><br><span class="line">#退出当前环境</span><br><span class="line">(py3env) bd@clem:~$ deactivate</span><br></pre></td></tr></tbody></table></figure><h3 id="Windows系统跟Linux系统文件互传"><a href="#Windows系统跟Linux系统文件互传" class="headerlink" title="Windows系统跟Linux系统文件互传"></a>Windows系统跟Linux系统文件互传</h3><ol><li>可以通过pycharm的deployment的上传下载进行文件互传</li><li>可以通过mobaxterm软件左边的目录，通过鼠标的选中文件拖动到Windows系统，或者把桌面或文件夹里面的文件拖到目录栏即可</li></ol><h3 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#切换管理员</span><br><span class="line">bd@clem:~$ su root</span><br><span class="line">Password:</span><br><span class="line">su: Authentication failure</span><br><span class="line">#给管理员设置密码</span><br><span class="line">bd@clem:~$ sudo passwd</span><br><span class="line">[sudo] password for bd:#普通用户bd的密码</span><br><span class="line">New password:#设置的新密码</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">bd@clem:~$ su root#切换超级管理员</span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line">#创建新用户</span><br><span class="line">root@clem:/home/bd# useradd -m lili</span><br><span class="line">root@clem:/home/bd# cd ..</span><br><span class="line">#查看新用户已经创建成功</span><br><span class="line">root@clem:/home# ls</span><br><span class="line">bd  lili</span><br><span class="line">#给新用户设置登录密码</span><br><span class="line">root@clem:/home# passwd lili</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">root@clem:/etc# su lili</span><br><span class="line">#切换后如果没有修改配置文件，前面的文字会乱码</span><br><span class="line">\[\e]0;\u@\h: \w\a\]\u@\h:\w$ su bd</span><br><span class="line">#进入到配置文件的文件夹</span><br><span class="line">bd@clem:/home$ cd /etc</span><br><span class="line">bd@clem:/etc$ ls -a</span><br><span class="line">#切换管理员用户修改配置文件</span><br><span class="line">bd@clem:/etc$ su root</span><br><span class="line">Password:</span><br><span class="line">#通过vim编辑器修改配置文件</span><br><span class="line">root@clem:/etc# vim passwd</span><br><span class="line">#进入配置文件后，</span><br><span class="line">#</span><br><span class="line">#最下面两行有提示一个command and enter</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>如果分屏的情况输入：q回车，就会只显示一个屏</p><p>出现报错提示按ctrl+enter</p><p>按i进入到修改模式</p><p>修改完之后按esc退出修改模式，输入：wq保存并退出</p><p>添加用户组</p><p>主组和附属组，用户在那个组，那个组就是他的主组</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@clem:/etc# groupadd python</span><br><span class="line">root@clem:/etc# su lili</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@clem:/etc# usermod -g lili -G python,java lili</span><br><span class="line"></span><br><span class="line">lili@clem:~$ groups</span><br><span class="line">lili python java</span><br><span class="line"></span><br><span class="line">lili@clem:~$ newgrp python</span><br><span class="line"></span><br><span class="line">lili@clem:~$ touch aaa.py</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>删除用户</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#没有加上-r的参数，用户就会删除不彻底</span><br><span class="line">bd@clem:~$ sudo userdel lili</span><br><span class="line">#丽丽用户组还会存在，直接当做文件夹删除即可</span><br><span class="line">root@clem:/home# rm -rf lili</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>删除用户组</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~$ sudo groupdel python</span><br><span class="line">bd@clem:~$ sudo groupdel java</span><br></pre></td></tr></tbody></table></figure><p>修改用户的文件权限</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~/test$ chmod u-w demo.py</span><br></pre></td></tr></tbody></table></figure><p>修改文件的所属组</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~/test$ sudo chgrp root demo.py</span><br></pre></td></tr></tbody></table></figure><p>修改文件所属的用户和用户组</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~/test$ sudo chown -R root:bd demo.py</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux基础使用&quot;&gt;&lt;a href=&quot;#Linux基础使用&quot; class=&quot;headerlink&quot; title=&quot;Linux基础使用&quot;&gt;&lt;/a&gt;Linux基础使用&lt;/h2&gt;&lt;h3 id=&quot;Ubuntu软件下载&quot;&gt;&lt;a href=&quot;#Ubuntu软件下载&quot; cla</summary>
      
    
    
    
    
    <category term="Linux基础" scheme="https://bileis.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop基本概念与生态介绍</title>
    <link href="https://bileis.github.io/2024/03/16/Hadoop%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E7%94%9F%E6%80%81%E4%BB%8B%E7%BB%8D/"/>
    <id>https://bileis.github.io/2024/03/16/Hadoop%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E7%94%9F%E6%80%81%E4%BB%8B%E7%BB%8D/</id>
    <published>2024-03-16T12:42:17.000Z</published>
    <updated>2024-03-16T13:53:47.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大数据概述"><a href="#大数据概述" class="headerlink" title="大数据概述"></a>大数据概述</h2><p>大数据（big data），指的是在一定时间范围内不能以常规软件工具处理（存储和计算）的大而复杂的数据集。说白了大数据就是使用单台计算机没法在规定时间内处理完，或者压根就没法处理的数据集。</p><h3 id="大数据的特性"><a href="#大数据的特性" class="headerlink" title="大数据的特性"></a>大数据的特性</h3><ul><li><p><code>大量 (Volume)</code></p></li><li><ul><li>大数据的“大”首先体现在数据量上。这意味着您需要处理海量、低密度的非结构化数据。这些数据的价值可能是未知的，例如 Twitter 数据流、网页或移动应用点击流，以及设备传感器所捕获的数据等等。在实际应用中，大数据的数据量通常高达数十 TB，甚至数百 PB。</li></ul></li><li><p><code>高速 (Velocity)</code></p></li><li><ul><li>大数据的“高速”指高速接收乃至处理数据 — 数据通常直接流入内存而非写入磁盘。在实际应用中，某些联网的智能产品需要实时或近乎实时地运行，要求基于数据实时评估和操作，而大数据只有具备“高速”特性才能满足这些要求。</li></ul></li><li><p><code>多样化 (Variety)</code></p></li><li><ul><li>多样化是指数据类型众多。通常来说，传统数据属于结构化数据，能够整齐地纳入关系数据库。随着大数据的兴起，各种新的非结构化数据类型不断涌现，例如文本、音频和视频等等，它们需要经过额外的预处理操作才能真正提供洞察和支持性元数据。</li></ul></li></ul><p>Hadoop 是用于处理大数据的工具之一。Hadoop 和其他软件产品通过特定的专有算法和方法来解释或解析大数据搜索的结果。</p><p><img src="/../images/hadoop/image-20240316204701930.png" alt="image-20240316204701930"></p><p>在大数据处理上，Hadoop并非是唯一的分布式处理架构，但是对于大部分的企业来说，<strong>基于Hadoop已经能够满足绝大部分的数据需</strong>求，因此才会成为现在的主流选择。</p><h2 id="Hadoop-概述"><a href="#Hadoop-概述" class="headerlink" title="Hadoop 概述"></a>Hadoop 概述</h2><p>Hadoop 是 Apache软件基金会下一个开源分布式计算平台，以 HDFS（Hadoop Distributed File System）、MapReduce（Hadoop2.0加入了YARN，Yarn是资源调度框架，能够细粒度的管理和调度任务，还能够支持其他的计算框架，比如spark）为核心的 Hadoop 为用户提供了系统底层细节透明的分布式基础架构。hdfs的高容错性、高伸缩性、高效性等优点让用户可以将Hadoop部署在低廉的硬件上，形成分布式系统。</p><p>是一个由 Apache 基金会所开发的分布式系统基础架构，主要解决海量数据的储存和海量数据的分析计算问题。广义上说，Hadoop 是一个更广泛的概念，Hadoop 生态圈。</p><h2 id="Hadoop-发行版本"><a href="#Hadoop-发行版本" class="headerlink" title="Hadoop 发行版本"></a>Hadoop 发行版本</h2><h4 id="Apache-Hadoop发行版"><a href="#Apache-Hadoop发行版" class="headerlink" title="Apache Hadoop发行版"></a>Apache Hadoop发行版</h4><ul><li>官方地址：<a href="https://hadoop.apache.org/">https://hadoop.apache.org</a></li></ul><p>Apache版本最原始（最基础）的版本，对于入门学习最好。</p><p><img src="/../images/hadoop/image-20240316204850323.png" alt="image-20240316204850323"></p><h4 id="DKhadoop发行版"><a href="#DKhadoop发行版" class="headerlink" title="DKhadoop发行版"></a>DKhadoop发行版</h4><ul><li>Github地址：<a href="https://github.com/dkhadoop/dk-fitting">https://github.com/dkhadoop/dk-fitting</a></li></ul><p>有效的集成了整个HADOOP生态系统的全部组件，并深度优化，重新编译为一个完整的更高性能的大数据通用计算平台，实现了各部件的有机协调。因此DKH相比开源的大数据平台，在计算性能上有了高达5倍（最大）的性能提升。DKhadoop将复杂的大数据集群配置简化至三种节点（主节点、管理节点、计算节点），极大的简化了集群的管理运维，增强了集群的高可用性、高可维护性、高稳定性。</p><p><img src="/../images/hadoop/image-20240316204921753.png" alt="image-20240316204921753"></p><h4 id="Cloudera发行版"><a href="#Cloudera发行版" class="headerlink" title="Cloudera发行版"></a>Cloudera发行版</h4><ul><li>官方地址：<a href="https://www.cloudera.com/products/open-source/apache-hadoop.html">https://www.cloudera.com/products/open-source/apache-hadoop.html</a></li></ul><p>CDH是Cloudera的hadoop发行版，完全开源，比Apache hadoop在兼容性，安全性，稳定性上有增强。</p><p><img src="/../images/hadoop/image-20240316205114191.png" alt="image-20240316205114191"></p><h4 id="Hortonworks发行版"><a href="#Hortonworks发行版" class="headerlink" title="Hortonworks发行版"></a>Hortonworks发行版</h4><ul><li>官方地址：<a href="https://www.cloudera.com/products/hdp.html">https://www.cloudera.com/products/hdp.html</a></li></ul><p>Hortonworks 的主打产品是Hortonworks Data Platform (HDP)，也同样是100%开源的产品，其版本特点：HDP包括稳定版本的Apache Hadoop的所有关键组件;安装方便，HDP包括一个现代化的，直观的用户界面的安装和配置工具。</p><p><img src="/../images/hadoop/image-20240316205236938.png" alt="image-20240316205236938"></p><h4 id="华为hadoop发行版"><a href="#华为hadoop发行版" class="headerlink" title="华为hadoop发行版"></a>华为hadoop发行版</h4><p>华为FusionInsight大数据平台是集Hadoop生态发行版、大规模并行处理数据库、大数据云服务于一体的融合数据处理与服务平台，拥有端到端全生命周期的解决方案能力。除了提供包括批处理、内存计算、流计算和MPPDB在内的全方位数据处理能力外，还提供数据分析挖掘平台、数据服务平台，帮助用户实现从数据到知识，从知识到智慧的转换，进而帮助用户从海量数据中挖掘数据价值。</p><p><img src="/../images/hadoop/image-20240316205258712.png" alt="image-20240316205258712"></p><h2 id="版本之间的区别"><a href="#版本之间的区别" class="headerlink" title="版本之间的区别"></a>版本之间的区别</h2><h4 id="Hadoop1-x-Hadoop2-x的演变"><a href="#Hadoop1-x-Hadoop2-x的演变" class="headerlink" title="Hadoop1.x - Hadoop2.x的演变"></a>Hadoop1.x - Hadoop2.x的演变</h4><p><img src="/../images/hadoop/image-20240316205321093.png" alt="image-20240316205321093"></p><h4 id="Hadoop-1-X、2-X、3-X区别"><a href="#Hadoop-1-X、2-X、3-X区别" class="headerlink" title="Hadoop 1.X、2.X、3.X区别"></a>Hadoop 1.X、2.X、3.X区别</h4><ul><li><p>1.X</p></li><li><ul><li>MapReduce（计算+资源调度）</li><li>HDFS（数据存储）</li><li>Common（辅助工具）</li></ul></li><li><p>2.X</p></li><li><ul><li>MapReduce（计算）</li><li>Yarn（资源调度）</li><li>HDFS（数据存储）</li><li>Common（辅助工具）</li></ul></li><li><p>3.X：组成上没有变化</p></li></ul><h4 id="Hadoop2-x与Hadoop3-x区别对比"><a href="#Hadoop2-x与Hadoop3-x区别对比" class="headerlink" title="Hadoop2.x与Hadoop3.x区别对比"></a>Hadoop2.x与Hadoop3.x区别对比</h4><h6 id="License"><a href="#License" class="headerlink" title="License"></a>License</h6><ul><li>Hadoop 2.x - Apache 2.0，开源</li><li>Hadoop 3.x - Apache 2.0，开源</li></ul><h6 id="支持的最低Java版本"><a href="#支持的最低Java版本" class="headerlink" title="支持的最低Java版本"></a>支持的最低Java版本</h6><ul><li>Hadoop 2.x - java的最低支持版本是java 7</li><li>Hadoop 3.x - java的最低支持版本是java 8</li></ul><h6 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h6><ul><li>Hadoop 2.x - 可以通过复制（浪费空间）来处理容错。</li><li>Hadoop 3.x - 可以通过Erasure编码处理容错。</li></ul><h6 id="数据平衡"><a href="#数据平衡" class="headerlink" title="数据平衡"></a>数据平衡</h6><ul><li>Hadoop 2.x - 对于数据，平衡使用HDFS平衡器。</li><li>Hadoop 3.x - 对于数据，平衡使用Intra-data节点平衡器，该平衡器通过HDFS磁盘平衡器CLI调用。</li></ul><h6 id="存储Scheme"><a href="#存储Scheme" class="headerlink" title="存储Scheme"></a>存储Scheme</h6><ul><li>Hadoop 2.x - 使用3X副本Scheme。</li><li>Hadoop 3.x - 支持HDFS中的擦除编码。</li></ul><h6 id="存储开销"><a href="#存储开销" class="headerlink" title="存储开销"></a>存储开销</h6><ul><li><p>Hadoop 2.x - HDFS在存储空间中有200％的开销。</p></li><li><p>Hadoop 3.x - 存储开销仅为50％。</p></li><li><p>存储开销示例</p></li><li><ul><li>Hadoop 2.x - 如果有6个块，那么由于副本方案（Scheme），将有18个块占用空间。</li><li>Hadoop 3.x - 如果有6个块，那么将有9个块占用6块空间，3个用于奇偶校验。</li></ul></li></ul><h6 id="YARN时间线服务"><a href="#YARN时间线服务" class="headerlink" title="YARN时间线服务"></a>YARN时间线服务</h6><ul><li>Hadoop 2.x - 使用具有可伸缩性问题的旧时间轴服务。</li><li>Hadoop 3.x - 改进时间线服务v2并提高时间线服务的可扩展性和可靠性。</li></ul><h6 id="默认端口范围"><a href="#默认端口范围" class="headerlink" title="默认端口范围"></a>默认端口范围</h6><ul><li>Hadoop 2.x - 在Hadoop 2.0中，一些默认端口是Linux临时端口范围。所以在启动时，他们将无法绑定。</li><li>Hadoop 3.x - 但是在Hadoop 3.0中，这些端口已经移出了短暂的范围。</li></ul><h6 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h6><ul><li>Hadoop 2.x - 使用Hive，pig，Tez，Hama，Giraph和其他Hadoop工具。</li><li>Hadoop 3.x - 可以使用Hive，pig，Tez，Hama，Giraph和其他Hadoop工具。</li></ul><h6 id="兼容的文件系统"><a href="#兼容的文件系统" class="headerlink" title="兼容的文件系统"></a>兼容的文件系统</h6><ul><li>Hadoop 2.x - HDFS（默认FS），FTP文件系统：它将所有数据存储在可远程访问的FTP服务器上。Amazon S3（简单存储服务）文件系统Windows Azure存储Blob（WASB）文件系统。</li><li>Hadoop 3.x - 它支持所有前面以及Microsoft Azure Data Lake文件系统。</li></ul><h6 id="Datanode资源"><a href="#Datanode资源" class="headerlink" title="Datanode资源"></a>Datanode资源</h6><ul><li>Hadoop 2.x - Datanode资源不专用于MapReduce，我们可以将它用于其他应用程序。</li><li>Hadoop 3.x - 此处数据节点资源也可用于其他应用程序。</li></ul><h6 id="MR-API兼容性"><a href="#MR-API兼容性" class="headerlink" title="MR API兼容性"></a>MR API兼容性</h6><ul><li>Hadoop 2.x - 与Hadoop 1.x程序兼容的MR API，可在Hadoop 2.X上执行。</li><li>Hadoop 3.x - 此处，MR API与运行Hadoop 1.x程序兼容，以便在Hadoop 3.X上执行。</li></ul><h6 id="支持Microsoft-Windows"><a href="#支持Microsoft-Windows" class="headerlink" title="支持Microsoft Windows"></a>支持Microsoft Windows</h6><ul><li>Hadoop 2.x - 它可以部署在Windows上。</li><li>Hadoop 3.x - 它也支持Microsoft Windows。</li></ul><h6 id="插槽-容器"><a href="#插槽-容器" class="headerlink" title="插槽/容器"></a>插槽/容器</h6><ul><li>Hadoop 2.x - Hadoop 1适用于插槽的概念，但Hadoop 2.X适用于容器的概念。通过容器，我们可以运行通用任务。</li><li>Hadoop 3.x - 它也适用于容器的概念。</li></ul><h6 id="单点故障"><a href="#单点故障" class="headerlink" title="单点故障"></a>单点故障</h6><ul><li>Hadoop 2.x - 具有SPOF的功能，因此只要Namenode失败，它就会自动恢复。</li><li>Hadoop 3.x - 具有SPOF的功能，因此只要Namenode失败，它就会自动恢复，无需人工干预就可以克服它。</li></ul><h6 id="HDFS联盟"><a href="#HDFS联盟" class="headerlink" title="HDFS联盟"></a>HDFS联盟</h6><ul><li>Hadoop 2.x - 在Hadoop 1.0中，只有一个NameNode来管理所有Namespace，但在Hadoop 2.0中，多个NameNode用于多个Namespace。</li><li>Hadoop 3.x - Hadoop 3.x还有多个名称空间用于多个名称空间。</li></ul><h6 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h6><ul><li>Hadoop 2.x - 我们可以扩展到每个群集10,000个节点。</li><li>Hadoop 3.x - 更好的可扩展性。我们可以为每个群集扩展超过10,000个节点。</li></ul><h6 id="访问数据"><a href="#访问数据" class="headerlink" title="访问数据"></a>访问数据</h6><ul><li>Hadoop 2.x - 由于数据节点缓存，我们可以快速访问数据。</li><li>Hadoop 3.x - 这里也通过Datanode缓存我们可以快速访问数据。</li></ul><h6 id="HDFS快照"><a href="#HDFS快照" class="headerlink" title="HDFS快照"></a>HDFS快照</h6><ul><li>Hadoop 2.x - Hadoop 2增加了对快照的支持。它为用户错误提供灾难恢复和保护。</li><li>Hadoop 3.x - Hadoop 2也支持快照功能。</li></ul><h6 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h6><ul><li>Hadoop 2.x - 可以作为各种数据分析的平台，可以运行事件处理，流媒体和实时操作。</li><li>Hadoop 3.x - 这里也可以在YARN的顶部运行事件处理，流媒体和实时操作。</li></ul><h6 id="群集资源管理"><a href="#群集资源管理" class="headerlink" title="群集资源管理"></a>群集资源管理</h6><ul><li>Hadoop 2.x - 对于群集资源管理，它使用YARN。它提高了可扩展性，高可用性，多租户。</li><li>Hadoop 3.x - 对于集群，资源管理使用具有所有功能的YARN。</li></ul><h2 id="Hadoop-生态系统"><a href="#Hadoop-生态系统" class="headerlink" title="Hadoop 生态系统"></a>Hadoop 生态系统</h2><p><img src="/../images/hadoop/image-20240316205548785.png" alt="image-20240316205548785"></p><p><img src="/../images/hadoop/image-20240316205558454.png" alt="image-20240316205558454"></p><h4 id="HDFS（Hadoop-Distributed-File-System）"><a href="#HDFS（Hadoop-Distributed-File-System）" class="headerlink" title="HDFS（Hadoop Distributed File System）"></a>HDFS（Hadoop Distributed File System）</h4><h6 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h6><ul><li>是分布式文件管理系统中的一种</li><li>通过目录树来定位文件</li><li><strong>适合一次写入，多次读出</strong>。一个文件经过创建、写入和关闭之后就不需要改变</li></ul><h6 id="架构概述"><a href="#架构概述" class="headerlink" title="架构概述"></a>架构概述</h6><ul><li><strong>NameNode</strong>（nn）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的DataNode等；配置副本策略；处理的客户端的读写请求</li><li><strong>DataNode</strong>（dn）：在本地文件系统存储文件块数据，以及块数据的校验和；执行数据块的读/写操作</li><li><strong>Secondary NameNode</strong>（2nn）：每隔一段时间对NameNode元数据备份；并非热备，当NameNode挂掉的时候，并不能马上替换NameNode并提供服务；紧急情况，可辅助恢复NameNode</li><li><strong>Client</strong>：将上传到HDFS的文件切分成块（128M / 256M）；与NameNode交互，获取文件位置信息；与DataNode交互，读取写入数据；管理HDFS，例如NameNode格式化，对HDFS增删改查</li></ul><h6 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h6><ul><li><p><strong>优点</strong></p></li><li><ul><li><strong>数据规模</strong> 能够达到GB、TB、PB级别</li><li><strong>文件规模</strong> 能够处理百万规模以上的文件数量</li><li>高容错性：数据自动保存多个副本，某一个副本丢失之后，可以自动恢复</li><li>适合处理大数据：</li><li>可构建在廉价的机器上：通过多副本机制，提高可靠性</li></ul></li><li><p><strong>缺点</strong></p></li><li><ul><li>不适合<strong>低延时</strong>数据访问：毫秒级的存储数据</li><li>无法高效的对大量<strong>小文件</strong>进行存储：存储大量小文件的话，会占用NameNode 大量的内存来存储文件目录和块信息，NameNode的内存总是有限的；小文件的存储的寻址时间会超过读取时间，违反了HDFS的设计目标</li><li>不支持并发写入、文件随机修改：一个文件只能有一个写，不允许多个线程同时写；<strong>仅支持数据追加</strong>，不支持文件的随机修改</li></ul></li></ul><h6 id="写数据流程"><a href="#写数据流程" class="headerlink" title="写数据流程"></a>写数据流程</h6><p><img src="/../images/hadoop/image-20240316205725307.png" alt="image-20240316205725307"></p><p><strong>最近距离计算</strong>：在HDFS写数据的过程中，NameNode会选择距离待上传数据最近距离的DataNode接受数据；节点距离（<strong>两个节点到达最近的共同祖先的距离总和</strong>）</p><p><strong>读数据流程</strong></p><p><img src="/../images/hadoop/image-20240316205816364.png" alt="image-20240316205816364"></p><p><strong>NameNode 工作机制</strong></p><p><img src="/../images/hadoop/image-20240316205831301.png" alt="image-20240316205831301"></p><ul><li>Fsimage 文件：HDFS 文件系统源数据的一个永久性的检查点，其中包含 HDFS 文件系统的所有目录和文件inode的序列化信息</li><li>Edits 文件：存放 HDFS 文件系统的所有更新操作的路径，文件系统客户端执行的所有写操作首先会被记录到 Edits 文件中</li><li>默认 1 小时检查执行一次，1 分钟检查一次操作次数，当操作次数达到 100 w 时，SecondaryNameNode 执行一次</li></ul><p><strong>DataNode 工作机制</strong></p><p><img src="/../images/hadoop/image-20240316205921002.png" alt="image-20240316205921002"></p><h4 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h4><h6 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h6><ul><li>MapReduce 是一个<strong>分布式运算程序</strong>的编程框架，是用户开发“基于 Hadoop 的数据分析应用”的核心框架</li><li>MapReduce 核心功能是将<strong>用户编写的业务逻辑代码</strong>和<strong>自带默认组件</strong>整合成一个完整的<strong>分布式运算程序</strong>，并发运行在一个 Hadoop 集群上</li></ul><h6 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h6><ul><li><p><strong>优点</strong></p></li><li><ul><li>易于编程：用户只需要关心业务逻辑，实现框架的接口</li><li>良好的扩展性：可以动态增加服务器，解决计算资源不够的问题</li><li>高容错性：任何一台机器挂掉，可以将任务转移到其他节点</li><li>适合海量数据计算（TB/PB） ：几千台服务器共同计算</li></ul></li><li><p><strong>缺点</strong></p></li><li><ul><li>不擅长实时计算（Mysql）</li><li>不擅长流式计算（SparkStreaming / Flink）</li><li>不擅长DAG有向无环图（计算出来的结果作为下一次计算的参数，迭代计算）计算（Spark）</li></ul></li></ul><h6 id="架构概述-1"><a href="#架构概述-1" class="headerlink" title="架构概述"></a>架构概述</h6><ul><li>Map 阶段并行处理输入数据</li><li>Reduce 阶段对 Map 结果进行汇总</li></ul><h6 id="MapReduce核心思想"><a href="#MapReduce核心思想" class="headerlink" title="MapReduce核心思想"></a>MapReduce核心思想</h6><p><img src="/../images/hadoop/image-20240316205952926.png" alt="image-20240316205952926"></p><h6 id="MapReduce-进程"><a href="#MapReduce-进程" class="headerlink" title="MapReduce 进程"></a>MapReduce 进程</h6><p>一个完整的 MapReduce 程序在分布式运行时有三类实例进程：</p><ul><li><strong>MrAppMaster</strong>：负责珍格格程序的过程调度及状态协调</li><li><strong>MapTask</strong>：负责 Map 阶段的整个数据处理流程</li><li><strong>ReduceTask</strong>：负责 Reduce 阶段的整个数据处理流程</li></ul><h6 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h6><p><strong>定义</strong></p><ul><li>序列化：把内存中的对象，转换成字节序列（或其他数据传输协议）以便于存储到磁盘（持久化）和网络传输</li><li>反序列化：将收到字节序列（或其他数据传输协议）或者是磁盘的持久化数据，转换成内存中的对象</li></ul><h6 id="InputFormat-数据输入"><a href="#InputFormat-数据输入" class="headerlink" title="InputFormat 数据输入"></a>InputFormat 数据输入</h6><p><strong>数据块和与数据切片</strong></p><ul><li>数据块：Block 是HDFS 物理上把数据分成一块一块，数据块是HDFS存储数据单位</li><li>数据切片：数据切片只是在逻辑上对输入进行分片，并不会在磁盘上将其切分成片进行存储。数据切片是MapReduce 程序计算输入数据的单位，一个切片会对应启动一个MapTask</li></ul><p><strong>切片机制</strong></p><ul><li>一个 Job 的 Map 阶段并行度由客户端再提交 Job 时的切片数决定</li><li>每个 Split 切片分配一个 MapTask 并行实例处理</li><li>默认情况下，切片大小 = BlockSize</li><li>切片时不考虑数据集整体，而是逐个针对每一个文件单独切片</li></ul><h6 id="Shuffle-机制"><a href="#Shuffle-机制" class="headerlink" title="Shuffle 机制"></a>Shuffle 机制</h6><p><strong>定义</strong>：Map 方法之后，Reduce 方法之前的数据处理过程称之为 Shuffle （打乱顺序，洗牌）</p><p><img src="/../images/hadoop/image-20240316210013981.png" alt="image-20240316210013981"></p><p><strong>分区排序</strong>：按照<strong>字典</strong>顺序对 <strong>Key</strong> 的索引使用<strong>快速排序</strong></p><p><strong>MapTask 工作机制</strong></p><p><img src="/../images/hadoop/image-20240316210031536.png" alt="image-20240316210031536"></p><p><strong>ReduceTask 工作机制</strong></p><p><img src="/../images/hadoop/image-20240316210056874.png" alt="image-20240316210056874"></p><p><strong>数据清洗-ETL（Extract-Tramsform-Load）</strong></p><p><strong>定义</strong></p><ul><li>用来描述将数据从来源端经过抽取（Extract）、转换（Transform）、加载（Load）至目的端的过程。ETL 一词较常用在数据仓库，但其对象并不限于数据仓库</li><li>在运行核心业务 MapReduce 程序之前，往往要先对数据进行清洗，清理掉不符合用户要求的数据。<strong>清理过程往往只需要 Mapper 程序，不需要运行 Reduce 程序</strong></li></ul><h4 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h4><p>Yarn 是一个资源调度平台，负责为运算程序提供服务器运算资源，相当于一个分布式的操作系统平台，而 MapReduce 等运算程序则相当于运行于操作系统之上的应用程序</p><h6 id="架构概述-2"><a href="#架构概述-2" class="headerlink" title="架构概述"></a>架构概述</h6><p><img src="/../images/hadoop/image-20240316210229364.png" alt="image-20240316210229364"></p><ul><li><p><strong>ResourceManager</strong>（RM）：整个集群资源（内存、CPU等）的管理者</p></li><li><p><strong>NodeManager</strong>（NM）：单个节点服务器的管理者</p></li><li><p><strong>ApplicationMaster</strong>（AM）：单个任务运行的负责人</p></li><li><p><strong>Container</strong>：容器，相当于一台独立的服务器，里面封装了任务运行所需要的资源（内存、CPU、磁盘、网络）</p></li><li><p>注意</p></li><li><ul><li>客户端可以有多个</li><li>集群上可以运行多个 ApplicationMaster</li><li>每个 NodeManager 上可以有多个 Container</li></ul></li></ul><h6 id="YARN-工作机制"><a href="#YARN-工作机制" class="headerlink" title="YARN 工作机制"></a>YARN 工作机制</h6><p><img src="/../images/hadoop/image-20240316210244493.png" alt="image-20240316210244493"></p><p><strong>HDFS、YARN、MapReduce 三者关系</strong></p><p><img src="/../images/hadoop/image-20240316210256567.png" alt="image-20240316210256567"></p><h6 id="YARN-调度器"><a href="#YARN-调度器" class="headerlink" title="YARN 调度器"></a>YARN 调度器</h6><p>Hadoop 作业调度器主要有三种：FIFO、容量、公平调度器。Hadoop 3.1.3 默认的资源调度器是容量调度器</p><p><strong>FIFO调度器</strong></p><ul><li>单队列，根据提交作业的先后顺序，先来先服务</li></ul><p><strong>容量调度器</strong></p><ul><li><p>是Yahoo开发的多用户调度器</p></li><li><p>多队列：每个队列可配置一定的资源量</p></li><li><p>容量保证：管理员可为每个队列设置资源最低保证和资源使用上限</p></li><li><p>灵活性：如果一个队列中的资源有剩余，可以暂时共享给那些需要资源的队列，而一旦该队列有新的应用和程序提交，则其他队列借调的资源会归还给该队列</p></li><li><p>多租户：支持多用户共享集群和多应用程序同时运行。为了防止同一个用户的作业独占队列中的资源，该调度器会对同一用户提交的作业所占资源量进行限定</p></li><li><p><strong>分配算法</strong></p></li><li><ul><li>队列资源分配：从root 开始，使用深度优先算法，<strong>优先选择资源占用率最低</strong>的队列分配资源</li><li>作业资源分配：默认按照提交作业的优先级和提交时间顺序分配资源</li><li>容器资源分配：按照容器的优先级分配资源，如果优先级相同，按照数据本地性原则</li></ul></li></ul><p><strong>公平调度器</strong></p><ul><li><p>是 Facebook 开发的多用户调度器</p></li><li><p>具有与容量调度器的相同特点</p></li><li><p>不同点为</p></li><li><ul><li>缺额：某一个时刻一个作业应获得资源和实际获取资源的差距叫“缺额”</li><li>核心调度策略不同（容量调度器优先选择<strong>资源利用率低</strong>的队列；公平调度器优先选择对资源的<strong>缺额</strong>比例大的队列）</li><li>每个队列可以单独设置资源分配方式（容量调度器：FIFO、DRF；公平调度器：FIFO、FAIR、DRF）</li></ul></li><li><p>更多关于大数据 Hadoop系列的学习文章，请参阅：<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI0MDQ4MTM5NQ==&amp;action=getalbum&amp;album_id=2957050176765198340&amp;token=737685287&amp;lang=zh_CN#wechat_redirect">进击大数据</a>，本系列持续更新中。</p></li></ul><h4 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h4><p>Spark是加州大学伯克利分校AMP实验室（Algorithms, Machines, and People Lab）开发的通用内存并行<strong>计算框架</strong>，借鉴了MapReduce之上发展而来的，继承了其分布式并行计算的优点并改进了MapReduce明显的缺陷。使用场景如下：</p><ul><li><strong>复杂的批量处理（Batch Data Processing）</strong>，偏重点在于处理海量数据的能力，至于处理速度可忍受，通常的时间可能是在数十分钟到数小时；</li><li><strong>基于历史数据的交互式查询（Interactive Query）</strong>，通常的时间在数十秒到数十分钟之间</li><li><strong>基于实时数据流的数据处理（Streaming Data Processing）</strong>，通常在数百毫秒到数秒之间</li></ul><h4 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h4><p>Storm用于“连续计算”，对数据流做连续查询，在计算时就将结果以流的形式输出给用户。<strong>如今已被Flink替代</strong>。</p><h4 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h4><p>Apache Flink是一个<strong>面向数据流处理和批量数据处理</strong>的可分布式的开源<strong>计算框架</strong>，它基于同一个Flink流式执行模型（streaming execution model），能够支持流处理和批处理两种应用类型。由于流处理和批处理所提供的SLA(服务等级协议)是完全不相同， 流处理一般需要支持低延迟、Exactly-once保证，而批处理需要支持高吞吐、高效处理，所以在实现的时候通常是分别给出两套实现方法，或者通过一个独立的开源框架来实现其中每一种处理方案。</p><h4 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h4><p>一个可用的、可靠的、分布式的海量<strong>日志采集、聚合和传输系统</strong>。</p><h4 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h4><p>是为提供简单的数据操作而设计的<strong>分布式数据仓库</strong>，它提供了简单的类似SQL语法的HiveQL语言进行数据查询。</p><p><img src="/../images/hadoop/image-20240316210337881.png" alt="image-20240316210337881"></p><p><strong>Hive 架构原理</strong></p><p><img src="/../images/hadoop/image-20240316210355791.png" alt="image-20240316210355791"></p><ul><li><p><strong>用户接口（Client）</strong>：CLI（hive shell）、JDBC / ODBC（java 访问 hive）、WEBUI（浏览器访问 hive）</p></li><li><p><strong>元数据（Metastore）</strong>：元数据包括表名、表所属的数据库（默认是default）、表的拥有者、列 / 分区字段、表的类型（是否是外部表）、表的数据所在目录等；<strong>默认存储在自带的 derby 数据库中，推荐使用 MySQL 存储 Metastore</strong></p></li><li><p><strong>Hadoop</strong>：使用 HDFS 进行存储，使用 MapReduce 进行计算</p></li><li><p><strong>驱动器（Driver）</strong>：</p></li><li><ul><li>解析器（SQL Parser） ：将 SQL 字符串转换成抽象语法树 AST，这一步一般都用第三方工具库完成，比如 antlr；对 AST 进行语法分析，比如表是否存在、字段是否存在、SQL 语义是否有误</li><li>编译器（Physical Plan）：将 AST 编译生成逻辑执行计划</li><li>优化器（Query Optimizer）：对逻辑执行计划进行优化</li><li>执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于 Hive 来说，就是 MR/Spark</li></ul></li></ul><h6 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h6><p><img src="/../images/hadoop/image-20240316210414062.png" alt="image-20240316210414062"></p><p>Hive 通过给用户提供的一系列交互接口，接收到用户的指令（SQL），使用自己的 Driver，结合元数据（MetaStore），将这些指令翻译成 MapReduce，提交到 Hadoop 中执行，最后，将执行返回的结果输出到用户交互接口。</p><h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><p>分布式协调系统，Google Chubby的Java开源实现，是高可用的和可靠的分布式协同（coordination）系统，提供分布式锁之类的基本服务，用于构建分布式应用。</p><h4 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h4><p>基于Hadoop的<strong>分布式数据库</strong>，Google BigTable的开源实现 是一个有序、稀疏、多维度的映射表，有良好的伸缩性和高可用性，用来将数据存储到各个计算节点上。</p><h6 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h6><p>逻辑上，HBase 的数据模型同关系型数据库很类似，数据存储在一张表中，有行有列。但从底层物理存储结构（K-V）来看，HBase 更像是一个 multi-dimensional-map（多维 map）。</p><ul><li><p><strong>逻辑结构</strong></p><p><img src="/../images/hadoop/image-20240316210435008.png" alt="image-20240316210435008"></p></li><li><p><strong>物理存储结构</strong></p></li></ul><p><img src="/../images/hadoop/image-20240316210534259.png" alt="image-20240316210534259"></p><ul><li><p><strong>名词解释</strong></p></li><li><ul><li><strong>Name Space</strong>：命名空间，类似于关系型数据库的 database 概念，每个命名空间下有多个表。HBase 有两个自带的命名空间，分别是 <strong>hbase</strong> 和 <strong>default</strong>，hbase 中存放的是 HBase 内置的表，default 表是用户默认使用的命名空间</li><li><strong>Region</strong>：类似于关系型数据库的表概念。不同的是，HBase 定义代表时只需要声明<strong>列族</strong>即可，不需要声明具体的列。这意味着，往 HBase 写入数据时，字段可以动态、按需指定。因此，和关系型数据库相比，HBase 能够轻松应对字段变更的场景</li><li><strong>Row</strong>：HBase 表中的每行数据都由一个 RowKey 和多个 Column 组成，数据是按照 RowKey 的<strong>字典顺序存储</strong>的，并且查询数据时只能根据 RowKey 进行检索，所有 RowKey 的设计十分重要</li><li><strong>Column</strong>：HBase 中的每个列都由 <strong>Column Family 列族</strong> 和 <strong>Column Qualifier 列限定符</strong> 进行限定，例如info:name，info:age。建表时，只需指明列族，而列限定符无需预先定义</li><li><strong>Time Stamp</strong>：用于标识数据的不同版本，每条数据写入时，如果不指定时间戳，系统会自动为其加上该字段，其值为写入 HBase 的时间</li><li><strong>Cell</strong>：由 {rowkey,column Family:column Qualifier,time Stamp} 唯一确定的单元。cell中的数据是没有类型的，全部是<strong>字节码形式</strong>存储</li></ul></li></ul><h6 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h6><p><img src="/../images/hadoop/image-20240316210557038.png" alt="image-20240316210557038"></p><p><strong>Zookeeper的作用</strong>：HBase 通过 Zookeeper 来做 master 的高可用、RegionServer 的监控、元数据的入口以及集群配置的维护等工作。</p><p><strong>写数据流程</strong></p><p><img src="/../images/hadoop/image-20240316210638331.png" alt="image-20240316210638331"></p><p><strong>读数据流程</strong></p><p><img src="/../images/hadoop/image-20240316210647802.png" alt="image-20240316210647802"></p><h6 id="HBase-VS-Hive"><a href="#HBase-VS-Hive" class="headerlink" title="HBase VS Hive"></a>HBase VS Hive</h6><ul><li><p>Hive</p></li><li><ul><li>数据仓库：Hive 的本质其实就是相当于将 HDFS 中已经存储的文件在 Mysql 中做了一个双射关系，以方便使用 HQL 去管理查询。</li><li>用于数据分析、清晰：Hive 适用于离线的数据分析和清洗，延迟较高。</li><li>基于 HDFS、MapReduce：Hive 存储的数据依旧在 DataNode 上，编写 HQL 语句终将是转换为 MapReduce 代码执行。</li></ul></li><li><p>HBase</p></li><li><ul><li>数据库：是一种<strong>面向列族存储</strong>的非关系型数据库。</li><li>用于存储结构化和非结构化的数据：适用于单表非关系型数据的存储，不适合做关联查询，类似于JOIN等操作。</li><li>基于 HDFS：数据持久化存储的体现形式是 HFile，存放在 DataNode 中，被 RegionServer 以 region 的形式进行管理。</li><li>延迟较低，接入在线业务使用：面对大量的企业数据，HBase 可以直线单表大量数据的存储，同时提供了高效的数据访问速度。</li></ul></li><li><p>更多关于大数据 Hadoop系列的学习文章，请参阅：<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI0MDQ4MTM5NQ==&amp;action=getalbum&amp;album_id=2957050176765198340&amp;token=737685287&amp;lang=zh_CN#wechat_redirect">进击大数据</a>，本系列持续更新中。</p></li></ul><h4 id="Cloudbase"><a href="#Cloudbase" class="headerlink" title="Cloudbase"></a>Cloudbase</h4><p>基于Hadoop的<strong>数据仓库</strong>，支持标准的SQL语法进行数据查询。</p><h4 id="Pig"><a href="#Pig" class="headerlink" title="Pig"></a>Pig</h4><p>大数据<strong>流处理系统</strong>，建立于Hadoop之上为并行计算环境提供了一套数据工作流语言和执行框架。</p><h4 id="Mahout"><a href="#Mahout" class="headerlink" title="Mahout"></a>Mahout</h4><p>基于HadoopMapReduce的大规模<strong>数据挖掘与机器学习算法库</strong>。</p><h4 id="Oozie"><a href="#Oozie" class="headerlink" title="Oozie"></a>Oozie</h4><p>MapReduce工作流管理系统。</p><h4 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h4><p>数据转移系统，是一个用来将Hadoop和关系型数据库中的数据相互转  移的工具，可以将一个关系型数据库中的数据导入Hadoop的HDFS中，也可以将HDFS 的数据导入关系型数据库中。</p><h4 id="Scribe"><a href="#Scribe" class="headerlink" title="Scribe"></a>Scribe</h4><p>Facebook开源的<strong>日志收集聚合框架系统</strong>。</p><p>这里只是列举了一部分Hadoop生态里的组件，稍微介绍了一下。</p><blockquote><p><em>参考来源如下：<a href="https://blog.csdn.net/weixin_43842853/article/">https://blog.csdn.net/weixin_43842853/article/</a></em></p><p><em>details/124316032 <a href="https://blog.csdn.net/weixin_43842853/article/">https://blog.csdn.net/weixin_43842853/article/</a></em></p><p><em>details/123007306 <a href="https://cnblogs.com/liugp/p/16100092.html">https://cnblogs.com/liugp/p/16100092.html</a></em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;大数据概述&quot;&gt;&lt;a href=&quot;#大数据概述&quot; class=&quot;headerlink&quot; title=&quot;大数据概述&quot;&gt;&lt;/a&gt;大数据概述&lt;/h2&gt;&lt;p&gt;大数据（big data），指的是在一定时间范围内不能以常规软件工具处理（存储和计算）的大而复杂的数据集。说白了大数</summary>
      
    
    
    
    
    <category term="大数据 Hadoop 系列" scheme="https://bileis.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE-Hadoop-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://bileis.github.io/2024/03/16/Linux/"/>
    <id>https://bileis.github.io/2024/03/16/Linux/</id>
    <published>2024-03-16T12:26:04.000Z</published>
    <updated>2024-03-16T12:29:53.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux-简介"><a href="#Linux-简介" class="headerlink" title="Linux 简介"></a>Linux 简介</h2><h3 id="基本常用命令"><a href="#基本常用命令" class="headerlink" title="基本常用命令"></a>基本常用命令</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#查看当前Linux系统登录的用户、使用的终端和登录时间</span><br><span class="line">bd@clem:~$ who</span><br><span class="line">bd       tty1#Ubuntu本机         2024-03-15 20:19</span><br><span class="line">bd       pts/0#远程连接工具        2024-03-15 20:05 (10.0.2.2)</span><br><span class="line"></span><br><span class="line">#查看当前在那个文件夹里面（查看路径）</span><br><span class="line">bd@clem:~/py_case$ pwd</span><br><span class="line">/home/bd/py_case</span><br><span class="line">#查看当前文件夹里面的所有文件和文件夹</span><br><span class="line">bd@clem:~/py_case$ ls</span><br><span class="line">bank     mongodb  redis  test.py</span><br><span class="line">main.py  mysql    test   正则</span><br><span class="line">#查看所有的文件包含隐藏文件（配置文件）</span><br><span class="line">bd@clem:~$ ls -a</span><br><span class="line">.               .profile</span><br><span class="line">..              py_case</span><br><span class="line">.bash_history   .pycharm_helpers</span><br><span class="line">.bash_logout    .rediscli_history</span><br><span class="line">.bashrc         .SpaceVim</span><br><span class="line">.cache          .SpaceVim.d</span><br><span class="line">.config         .ssh</span><br><span class="line">.dbshell        .sudo_as_admin_successful</span><br><span class="line">django_test     .vim</span><br><span class="line">environment     .viminfo</span><br><span class="line">.local          .virtualenvs</span><br><span class="line">.mongorc.js     .Xauthority</span><br><span class="line">.mysql_history</span><br><span class="line">#查看所有的文件并且以列表的形式展示</span><br><span class="line">bd@clem:~$ ls -l</span><br><span class="line">total 12</span><br><span class="line">drwxrwxr-x 3 bd bd 4096 Feb 27 15:39 django_test</span><br><span class="line">drwxrwxr-x 4 bd bd 4096 Feb  3 20:19 environment</span><br><span class="line">drwxrwxr-x 8 bd bd 4096 Mar 13 21:00 py_case</span><br><span class="line">#以文件修改时间从后往前排序</span><br><span class="line">bd@clem:~$ ls -t</span><br><span class="line">py_case  django_test  environment</span><br><span class="line">#以文件名进行排序</span><br><span class="line">bd@clem:~$ ls -r</span><br><span class="line">py_case  environment  django_test</span><br><span class="line">#以文件大小 从小到大进行排序</span><br><span class="line">bd@clem:~$ ls -k</span><br><span class="line">django_test  environment  py_case</span><br><span class="line">bd@clem:~$</span><br><span class="line">#帮助文档 查看完之后按q退出</span><br><span class="line">bd@clem:~$ man ls</span><br><span class="line">#简单版本的帮助文档</span><br><span class="line">bd@clem:~$ ls --help</span><br><span class="line">#回到用户文件夹</span><br><span class="line">bd@clem:~/py_case/test$ cd</span><br><span class="line">#打开文件夹 到指定的文件夹</span><br><span class="line">bd@clem:~$ cd /home/bd/py_case/test</span><br><span class="line">#跳转到根目录文件夹</span><br><span class="line">bd@clem:~$ cd /</span><br><span class="line">#在当前目录不做任何操作</span><br><span class="line">bd@clem:~/py_case/test$ cd .</span><br><span class="line">#回到上级目录</span><br><span class="line">bd@clem:~/py_case/test$ cd ..</span><br><span class="line">#回到上次目录</span><br><span class="line">bd@clem:~/py_case$ cd -</span><br><span class="line">/home/bd/py_case/test</span><br></pre></td></tr></tbody></table></figure><h3 id="基本文件操作命令"><a href="#基本文件操作命令" class="headerlink" title="基本文件操作命令"></a>基本文件操作命令</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#创建文件夹</span><br><span class="line">bd@clem:~$ mkdir test</span><br><span class="line">bd@clem:~$ ls</span><br><span class="line">django_test  environment  py_case  test</span><br><span class="line">#删除文件夹 只能删除空文件夹</span><br><span class="line">bd@clem:~$ rmdir test</span><br><span class="line">bd@clem:~$ ls</span><br><span class="line">django_test  environment  py_case</span><br><span class="line">#创建文件</span><br><span class="line">bd@clem:~/test$ touch demo.py</span><br><span class="line">bd@clem:~/test$ ls</span><br><span class="line">demo.py</span><br><span class="line">#删除文件</span><br><span class="line">bd@clem:~/test$ rm demo.py</span><br><span class="line">bd@clem:~/test$ ls</span><br><span class="line">#强制删除文件夹或者文件</span><br><span class="line">bd@clem:~$ rm -rf test</span><br><span class="line">bd@clem:~$</span><br><span class="line">#复制文件到指定文件夹里面，不存在文件会自动创建，文件存在内容会被覆盖</span><br><span class="line">bd@clem:~/py_case$ cp test.py /home/bd/test/demo.py</span><br><span class="line">#移动文件到指定文件夹里面</span><br><span class="line">bd@clem:~/py_case$ mv test.py /home/bd/test</span><br><span class="line">#文件重命名 </span><br><span class="line">bd@clem:~/test$ mv test.py aaa.py</span><br></pre></td></tr></tbody></table></figure><h3 id="有趣的命令"><a href="#有趣的命令" class="headerlink" title="有趣的命令"></a>有趣的命令</h3><p><a href="https://cloud.tencent.com/developer/article/1462866">https://cloud.tencent.com/developer/article/1462866</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux-简介&quot;&gt;&lt;a href=&quot;#Linux-简介&quot; class=&quot;headerlink&quot; title=&quot;Linux 简介&quot;&gt;&lt;/a&gt;Linux 简介&lt;/h2&gt;&lt;h3 id=&quot;基本常用命令&quot;&gt;&lt;a href=&quot;#基本常用命令&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Linux基础" scheme="https://bileis.github.io/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo|指令</title>
    <link href="https://bileis.github.io/2024/03/10/Hexo-%E6%8C%87%E4%BB%A4/"/>
    <id>https://bileis.github.io/2024/03/10/Hexo-%E6%8C%87%E4%BB%A4/</id>
    <published>2024-03-10T04:02:21.000Z</published>
    <updated>2024-03-10T04:47:30.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></tbody></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li><li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>、<a href="https://pnpm.io/zh/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/zh-cn/docs/index.html#%E5%AE%89%E8%A3%85-Node-js">Node.js</a> 安装。</li></ol><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></tbody></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new "post title with whitespace"</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me "About me"</span><br></pre></td></tr></tbody></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>"About me"</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></tbody></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>"page"</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></tbody></table></figure><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></tbody></table></figure><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></tbody></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></tbody></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></tbody></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></tbody></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></tbody></table></figure><p>列出网站数据。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></tbody></table></figure><p>显示 Hexo 版本。</p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo config [key] [value]</span><br></pre></td></tr></tbody></table></figure><p>列出网站的配置（<code>_config.yml</code>）。如果指定了 <code>key</code>，则只展示配置中对应 <code>key</code> 的值；如果同时指定了 <code>key</code> 和 <code>value</code>，则将配置中对应的 <code>key</code> 的值修改为 <code>value</code>。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></tbody></table></figure><p>在安全模式下，不会加载插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></tbody></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new?assignees=&amp;labels=&amp;projects=&amp;template=bug_report.yml">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></tbody></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></tbody></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></tbody></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></tbody></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></tbody></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;init&quot;&gt;&lt;a href=&quot;#init&quot; class=&quot;headerlink&quot; title=&quot;init&quot;&gt;&lt;/a&gt;init&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://bileis.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>mysql基础</title>
    <link href="https://bileis.github.io/2024/03/05/MySql%E5%9F%BA%E7%A1%80/"/>
    <id>https://bileis.github.io/2024/03/05/MySql%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-05T01:00:29.000Z</published>
    <updated>2024-03-29T10:14:01.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、配置MySQL数据库"><a href="#1、配置MySQL数据库" class="headerlink" title="1、配置MySQL数据库"></a>1、配置MySQL数据库</h2><h3 id="1、查看配置文件"><a href="#1、查看配置文件" class="headerlink" title="1、查看配置文件"></a>1、查看配置文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~$ cd /etc</span><br><span class="line">bd@clem:/etc$ ls</span><br><span class="line">bd@clem:/etc$ cd mysql</span><br><span class="line">bd@clem:/etc/mysql$ ls</span><br><span class="line"></span><br><span class="line">bd@clem:/etc/mysql$ cd mysql.conf.d/</span><br><span class="line"></span><br><span class="line">bd@clem:/etc/mysql/mysql.conf.d$ ls</span><br><span class="line">bd@clem:/etc/mysql/mysql.conf.d$ vim mysqld.cnf</span><br></pre></td></tr></tbody></table></figure><h3 id="2、查看MySQL服务是否开始"><a href="#2、查看MySQL服务是否开始" class="headerlink" title="2、查看MySQL服务是否开始"></a>2、查看MySQL服务是否开始</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~$ service mysql status</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">出现running 则开启了</span></span><br><span class="line">Active: active (running) since Fri 2024-03-22 20</span><br><span class="line"></span><br><span class="line">bd@clem:~$ service mysql start</span><br></pre></td></tr></tbody></table></figure><h3 id="3、查看用户名跟密码"><a href="#3、查看用户名跟密码" class="headerlink" title="3、查看用户名跟密码"></a>3、查看用户名跟密码</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bd@clem:~$ mima</span><br><span class="line"> _________________________________________</span><br><span class="line">&lt; Mysql root密码:Root123 admin密码:qwe123 &gt;</span><br><span class="line"> -----------------------------------------</span><br><span class="line"></span><br><span class="line">bd@clem:~$ vim .bashrc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">找到message 修改admin用户的密码为qwe123</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4、登录MySQL"><a href="#4、登录MySQL" class="headerlink" title="4、登录MySQL"></a>4、登录MySQL</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u 用户名 -p密码</span></span><br><span class="line">bd@clem:~$ mysql -uadmin -pqwe123</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">exit</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit;</span></span><br><span class="line">bd@clem:~$ mysql -h127.0.0.1 -P3306 -uadmin -p</span><br><span class="line">Enter password:</span><br></pre></td></tr></tbody></table></figure><h2 id="2、数据库基本操作"><a href="#2、数据库基本操作" class="headerlink" title="2、数据库基本操作"></a>2、数据库基本操作</h2><h3 id="1、查看数据库"><a href="#1、查看数据库" class="headerlink" title="1、查看数据库"></a>1、查看数据库</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看有那些数据库</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SHOW DATABASES;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用MySQL数据库</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">USE `mysql`;</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前使用的数据库</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT DATABASE();</span></span><br><span class="line">+------------+</span><br><span class="line">| DATABASE() |</span><br><span class="line">+------------+</span><br><span class="line">| mysql      |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前登录的用户是谁</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT USER();</span></span><br><span class="line">+-----------------+</span><br><span class="line">| USER()          |</span><br><span class="line">+-----------------+</span><br><span class="line">| admin@localhost |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure><p>MySQL数据类型</p><p><a href="https://www.runoob.com/mysql/mysql-data-types.html">https://www.runoob.com/mysql/mysql-data-types.html</a></p><p>MySQL语句的要求 ：</p><p>关键字 函数名大写；库名、表名、字段名 小写并且用反引号【可写可不写】； 数据类型里面的字符串 小写 用引号【必写】。</p><h3 id="2、库创建、删除"><a href="#2、库创建、删除" class="headerlink" title="2、库创建、删除"></a>2、库创建、删除</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建数据库 库名</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">CREATE DATABASE `<span class="built_in">test</span>`;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果库已经存在，再次创建重复的会报错，所以加一个判断避免报错</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">CREATE DATABASE IF NOT EXISTS `<span class="built_in">test</span>`;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除数据库 库名</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">DROP DATABASE `<span class="built_in">test</span>`;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">DROP DATABASE IF EXISTS `<span class="built_in">test</span>`;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br></pre></td></tr></tbody></table></figure><h2 id="3、数据表基本操作"><a href="#3、数据表基本操作" class="headerlink" title="3、数据表基本操作"></a>3、数据表基本操作</h2><h3 id="1、表创建、删除、查看"><a href="#1、表创建、删除、查看" class="headerlink" title="1、表创建、删除、查看"></a>1、表创建、删除、查看</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先选择库之后再创建表</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">USE `<span class="built_in">test</span>`;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">CREATE TABLE IF NOT EXISTS `student`(</span></span><br><span class="line">    -&gt; `id` INT,</span><br><span class="line">    -&gt; `name` VARCHAR(20));</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意：符号需要成双成对出现，特别是引号，如果只有单个，MySQL语句会结束不了</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看所有的表</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SHOW TABLES;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看表约束</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SHOW CREATE TABLE `student`;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看表结构</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">DESC `student`;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除表</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">DROP TABLE `student`;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、字段增删改查"><a href="#2、字段增删改查" class="headerlink" title="2、字段增删改查"></a>2、字段增删改查</h3><h4 id="1、字段的增加"><a href="#1、字段的增加" class="headerlink" title="1、字段的增加"></a>1、字段的增加</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER TABLE `student` ADD(</span></span><br><span class="line">    -&gt; `age` INT,</span><br><span class="line">    -&gt; `phone` CHAR(11));</span><br></pre></td></tr></tbody></table></figure><h4 id="2、字段的查询"><a href="#2、字段的查询" class="headerlink" title="2、字段的查询"></a>2、字段的查询</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">DESC `student`;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、字段的删除"><a href="#3、字段的删除" class="headerlink" title="3、字段的删除"></a>3、字段的删除</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER TABLE `student` DROP `phone`;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4、字段的修改"><a href="#4、字段的修改" class="headerlink" title="4、字段的修改"></a>4、字段的修改</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改字段类型</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER TABLE `student` MODIFY `age` VARCHAR(4);</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改字段名和字段类型</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER TABLE `student` CHANGE `age` `ages` INT;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">表名重命名</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER TABLE `student` RENAME `stu`;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="4、表内容的增删改查"><a href="#4、表内容的增删改查" class="headerlink" title="4、表内容的增删改查"></a>4、表内容的增删改查</h2><h3 id="表数据的增加"><a href="#表数据的增加" class="headerlink" title="表数据的增加"></a>表数据的增加</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每个字段都添加内容</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">INSERT INTO `student` VALUES(1,<span class="string">"lili"</span>,16),(2,<span class="string">"lisa"</span>,14);</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定字段添加内容</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">INSERT INTO `student` (`<span class="built_in">id</span>`,`name`) VALUES (3,<span class="string">'jack'</span>);</span></span><br></pre></td></tr></tbody></table></figure><h3 id="表数据的查询"><a href="#表数据的查询" class="headerlink" title="表数据的查询"></a>表数据的查询</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询表中所有的数据</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT * FROM `student`;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询指定字段的数据</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT `name` FROM `student`;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="表数据的更新"><a href="#表数据的更新" class="headerlink" title="表数据的更新"></a>表数据的更新</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新年龄字段的所有数据</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update `student` SET `age`=18;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新其中一条数据的年龄</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">UPDATE `student` SET `age`=16 WHERE `<span class="built_in">id</span>`=2;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="表数据的删除"><a href="#表数据的删除" class="headerlink" title="表数据的删除"></a>表数据的删除</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除指定的数据</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">delete from `student` <span class="built_in">where</span> `name`=<span class="string">'lisa'</span>;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清空表数据</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">DELETE FROM `student`;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、配置MySQL数据库&quot;&gt;&lt;a href=&quot;#1、配置MySQL数据库&quot; class=&quot;headerlink&quot; title=&quot;1、配置MySQL数据库&quot;&gt;&lt;/a&gt;1、配置MySQL数据库&lt;/h2&gt;&lt;h3 id=&quot;1、查看配置文件&quot;&gt;&lt;a href=&quot;#1、查看配</summary>
      
    
    
    
    
    <category term="MySql基础入门" scheme="https://bileis.github.io/tags/MySql%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>c++核心编程-面对对象</title>
    <link href="https://bileis.github.io/2024/03/04/c-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B-%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/"/>
    <id>https://bileis.github.io/2024/03/04/c-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B-%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/</id>
    <published>2024-03-04T03:31:44.000Z</published>
    <updated>2024-03-05T01:15:17.632Z</updated>
    
    
    
    
    
    <category term="c++合集" scheme="https://bileis.github.io/tags/c-%E5%90%88%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>c++基础入门</title>
    <link href="https://bileis.github.io/2024/03/04/c-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>https://bileis.github.io/2024/03/04/c-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2024-03-04T03:23:43.000Z</published>
    <updated>2024-03-04T03:30:19.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"Hello world"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> <ul><li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，==对该段代码做整体说明==</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量的定义</span></span><br><span class="line"><span class="comment">//语法：数据类型  变量名 = 初始值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><p><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code></p><ul><li>==通常在文件上方定义==，表示一个常量</li></ul></li><li><p><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code></p><ul><li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、宏常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> day 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"一周里总共有 "</span> &lt;&lt; day &lt;&lt; <span class="string">" 天"</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、const修饰变量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> month = <span class="number">12</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">"一年里总共有 "</span> &lt;&lt; month &lt;&lt; <span class="string">" 个月份"</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//month = 24; //报错，常量是不可以修改的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"short 类型所占内存空间为： "</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"int 类型所占内存空间为： "</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"long 类型所占内存空间为： "</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"long long 类型所占内存空间为： "</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p></blockquote><h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p><p>浮点型变量分为两种：</p><ol><li>单精度float </li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line"><span class="type">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; d1&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"float  sizeof = "</span> &lt;&lt; <span class="built_in">sizeof</span>(f1) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"double sizeof = "</span> &lt;&lt; <span class="built_in">sizeof</span>(d1) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//科学计数法</span></span><br><span class="line"><span class="type">float</span> f2 = <span class="number">3e2</span>; <span class="comment">// 3 * 10 ^ 2 </span></span><br><span class="line">cout &lt;&lt; <span class="string">"f2 = "</span> &lt;&lt; f2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> f3 = <span class="number">3e-2</span>;  <span class="comment">// 3 * 0.1 ^ 2</span></span><br><span class="line">cout &lt;&lt; <span class="string">"f3 = "</span> &lt;&lt; f3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = 'a';</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ch = <span class="string">'a'</span>;</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ch = "abcde"; //错误，不可以用双引号</span></span><br><span class="line"><span class="comment">//ch = 'abcde'; //错误，单引号内只能引用一个字符</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>)ch &lt;&lt; endl;  <span class="comment">//查看字符a对应的ASCII码</span></span><br><span class="line">ch = <span class="number">97</span>; <span class="comment">//可以直接用ASCII给字符型变量赋值</span></span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p><p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td><strong>\\</strong></td><td><strong>代表一个反斜线字符”"</strong></td><td><strong>092</strong></td></tr><tr><td>'</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>"</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"\\"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"\tHello"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"\n"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C风格字符串</strong>： <code>char 变量名[] = "字符串值"</code></p><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str1[] = <span class="string">"hello world"</span>;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol><li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = "字符串值"</code></p><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">string str = <span class="string">"hello world"</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p></blockquote><h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p><p>bool类型只有两个值：</p><ul><li>true  — 真（本质是1）</li><li>false — 假（本质是0）</li></ul><p><strong>bool类型占==1个字节==大小</strong></p><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; flag &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">cout &lt;&lt; flag &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"size of bool = "</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">bool</span>) &lt;&lt; endl; <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//整型输入</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">"请输入整型变量："</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点型输入</span></span><br><span class="line"><span class="type">double</span> d = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">"请输入浮点型变量："</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; d;</span><br><span class="line">cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符型输入</span></span><br><span class="line"><span class="type">char</span> ch = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">"请输入字符型变量："</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; ch;</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串型输入</span></span><br><span class="line">string str;</span><br><span class="line">cout &lt;&lt; <span class="string">"请输入字符串型变量："</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔类型输入</span></span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">"请输入布尔型变量："</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; flag;</span><br><span class="line">cout &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>/</td><td>除</td><td>10 / 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a=2; b=++a;</td><td>a=3; b=3;</td></tr><tr><td>++</td><td>后置递增</td><td>a=2; b=a++;</td><td>a=3; b=2;</td></tr><tr><td>–</td><td>前置递减</td><td>a=2; b=–a;</td><td>a=1; b=1;</td></tr><tr><td>–</td><td>后置递减</td><td>a=2; b=a–;</td><td>a=1; b=2;</td></tr></tbody></table><p><strong>示例1：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; a1 + b1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a1 - b1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a1 * b1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a1 / b1 &lt;&lt; endl;  <span class="comment">//两个整数相除结果依然是整数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">cout &lt;&lt; a2 / b2 &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个小数可以相除</span></span><br><span class="line"><span class="type">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line"><span class="type">double</span> d2 = <span class="number">0.25</span>;</span><br><span class="line">cout &lt;&lt; d1 / d2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取模</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="number">10</span> % <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; a2 % b2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个小数不可以取模</span></span><br><span class="line"><span class="type">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">double</span> d2 = <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：只有整型变量可以进行取模运算</p></blockquote><p><strong>示例3：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递增</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置递增</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">a++; <span class="comment">//等价于a = a + 1</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置递增</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">++b;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区别</span></span><br><span class="line"><span class="comment">//前置递增先对变量进行++，再计算表达式</span></span><br><span class="line"><span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b2 = ++a2 * <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; b2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置递增先计算表达式，后对变量进行++</span></span><br><span class="line"><span class="type">int</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b3 = a3++ * <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; b3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=2; b=3;</td><td>a=2; b=3;</td></tr><tr><td>+=</td><td>加等于</td><td>a=0; a+=2;</td><td>a=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=5; a-=3;</td><td>a=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2; a*=2;</td><td>a=4;</td></tr><tr><td>/=</td><td>除等于</td><td>a=4; a/=2;</td><td>a=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3; a%2;</td><td>a=1;</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// +=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a += <span class="number">2</span>; <span class="comment">// a = a + 2;</span></span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a -= <span class="number">2</span>; <span class="comment">// a = a - 2</span></span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// *=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a *= <span class="number">2</span>; <span class="comment">// a = a * 2</span></span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a /= <span class="number">2</span>;  <span class="comment">// a = a / 2;</span></span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// %=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a %= <span class="number">2</span>;  <span class="comment">// a = a % 2;</span></span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4 == 3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4 != 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 1</td><td>1</td></tr></tbody></table><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a == b) &lt;&lt; endl; <span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a != b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &gt; b) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &lt; b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p></blockquote><h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例1：</strong>逻辑非</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 非</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; !a &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; !!a &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结： 真变假，假变真</p></blockquote><p><strong>示例2：</strong>逻辑与</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 与</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p></blockquote><p><strong>示例3：</strong>逻辑或</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 或</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>逻辑==或==运算符总结： ==同假为假，其余为真==</p></blockquote><h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p></li></ul><ol><li><p>单行格式if语句：<code>if(条件){ 条件满足执行的语句 }</code></p><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择结构-单行if语句</span></span><br><span class="line"><span class="comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">"请输入一个分数："</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"您输入的分数为： "</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if语句</span></span><br><span class="line"><span class="comment">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了一本大学！！！"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2"><li>多行格式if语句：<code>if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };</code></li></ol><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"请输入考试分数："</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了一本大学"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我未考上一本大学"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>多条件的if语句：<code>if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}</code></li></ol><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"请输入考试分数："</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了一本大学"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了二本大学"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了三本大学"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我未考上本科"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"请输入考试分数："</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了一本大学"</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了北大"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">650</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了清华"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了人大"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了二本大学"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我考上了三本大学"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"我未考上本科"</span> &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>练习案例：</strong> 三只小猪称体重</p><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？</p><h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">c = a &gt; b ? a : b;</span><br><span class="line">cout &lt;&lt; <span class="string">"c = "</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class="line"></span><br><span class="line">(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"c = "</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> 结果<span class="number">1</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> 结果<span class="number">2</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//请给电影评分 </span></span><br><span class="line"><span class="comment">//10 ~ 9   经典   </span></span><br><span class="line"><span class="comment">// 8 ~ 7   非常好</span></span><br><span class="line"><span class="comment">// 6 ~ 5   一般</span></span><br><span class="line"><span class="comment">// 5分以下 烂片</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">"请给电影打分"</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (score)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">"经典"</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">"非常好"</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">"一般"</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">"烂片"</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> while(循环条件){ 循环语句 }</code></p><p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"num = "</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">num++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><p><strong>while循环练习案例：</strong>==猜数字==</p><p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do{ 循环语句 } while(循环条件);</code></p><p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line">} <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p></blockquote><p><strong>练习案例：水仙花数</strong></p><p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p><p>例如：1^3 + 5^3+ 3^3 = 153</p><p>请利用do…while语句，求出所有3位数中的水仙花数</p><h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) { 循环语句; }</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>详解：</strong></p><blockquote><p>注意：for循环中的表达式，要用分号进行分隔</p></blockquote><blockquote><p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p></blockquote><p><strong>练习案例：敲桌子</strong></p><p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p><h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层循环执行1次，内层循环执行1轮</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"*"</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>练习案例：</strong>乘法口诀表</p><p>案例描述：利用嵌套循环，实现九九乘法表</p><h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例1：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">//1、在switch 语句中使用break</span></span><br><span class="line">cout &lt;&lt; <span class="string">"请选择您挑战副本的难度："</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"1、普通"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"2、中等"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"3、困难"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (num)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">"您选择的是普通难度"</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">"您选择的是中等难度"</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">"您选择的是困难难度"</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">//2、在循环语句中用break</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//跳出循环语句</span></span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>示例3：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; <span class="string">"*"</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：continue并没有使整个循环终止，而break会跳出循环</p></blockquote><h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"1"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"2"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"3"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"4"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">FLAG:</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"5"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p></blockquote><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p><p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};</code></li><li><code>数据类型  数组名[ ] = { 值1，值2 ...};</code></li></ol><p>示例</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方式1</span></span><br><span class="line"><span class="comment">//数据类型 数组名[元素个数];</span></span><br><span class="line"><span class="type">int</span> score[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用下标赋值</span></span><br><span class="line">score[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">score[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">score[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用下标输出</span></span><br><span class="line">cout &lt;&lt; score[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; score[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; score[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种定义方式</span></span><br><span class="line"><span class="comment">//数据类型 数组名[元素个数] =  {值1，值2 ，值3 ...};</span></span><br><span class="line"><span class="comment">//如果{}内不足10个数据，剩余数据用0补全</span></span><br><span class="line"><span class="type">int</span> score2[<span class="number">10</span>] = { <span class="number">100</span>, <span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> };</span><br><span class="line"></span><br><span class="line"><span class="comment">//逐个输出</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; score2[i] &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方式3</span></span><br><span class="line"><span class="comment">//数据类型 数组名[] =  {值1，值2 ，值3 ...};</span></span><br><span class="line"><span class="type">int</span> score3[] = { <span class="number">100</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> };</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; score3[i] &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p></blockquote><blockquote><p>总结2：数组中下标是从0开始索引</p></blockquote><h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组名用途</span></span><br><span class="line"><span class="comment">//1、可以获取整个数组占用内存空间大小</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = { <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> };</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"整个数组所占内存空间为： "</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"每个元素所占内存空间为： "</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"数组的元素个数为： "</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、可以通过数组名获取到数组首地址</span></span><br><span class="line">cout &lt;&lt; <span class="string">"数组首地址为： "</span> &lt;&lt; (<span class="type">int</span>)arr &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"数组中第一个元素地址为： "</span> &lt;&lt; (<span class="type">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"数组中第二个元素地址为： "</span> &lt;&lt; (<span class="type">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><p><strong>练习案例1</strong>：五只小猪称体重</p><p><strong>案例描述：</strong></p><p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p><p>找出并打印最重的小猪体重。</p><p><strong>练习案例2：</strong>数组元素逆置</p><p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p><p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p><h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">9</span>] = { <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> };</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span> - <span class="number">1</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - <span class="number">1</span> - i; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p><h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li><li><code> 数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li></ol><blockquote><p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1  </span></span><br><span class="line"><span class="comment">//数组类型 数组名 [行数][列数]</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; arr[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2 </span></span><br><span class="line"><span class="comment">//数据类型 数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } };</span></span><br><span class="line"><span class="type">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">{</span><br><span class="line">{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>},</span><br><span class="line">{<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3</span></span><br><span class="line"><span class="comment">//数据类型 数组名[行数][列数] = { 数据1，数据2 ,数据3，数据4  };</span></span><br><span class="line"><span class="type">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = { <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> }; </span><br><span class="line"></span><br><span class="line"><span class="comment">//方式4 </span></span><br><span class="line"><span class="comment">//数据类型 数组名[][列数] = { 数据1，数据2 ,数据3，数据4  };</span></span><br><span class="line"><span class="type">int</span> arr4[][<span class="number">3</span>] = { <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> };</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组数组名</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">{</span><br><span class="line">{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>},</span><br><span class="line">{<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"二维数组大小： "</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"二维数组一行大小： "</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"二维数组元素大小： "</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"二维数组行数： "</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"二维数组列数： "</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址</span></span><br><span class="line">cout &lt;&lt; <span class="string">"二维数组首地址："</span> &lt;&lt; arr &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"二维数组第一行地址："</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"二维数组第二行地址："</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"二维数组第一个元素地址："</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"二维数组第二个元素地址："</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结1：二维数组名就是这个数组的首地址</p></blockquote><blockquote><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote><h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> scores[<span class="number">3</span>][<span class="number">3</span>] =</span><br><span class="line">{</span><br><span class="line">{<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>},</span><br><span class="line">{<span class="number">90</span>,<span class="number">50</span>,<span class="number">100</span>},</span><br><span class="line">{<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>},</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">string names[<span class="number">3</span>] = { <span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span> };</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">{</span><br><span class="line">sum += scores[i][j];</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; names[i] &lt;&lt; <span class="string">"同学总成绩为： "</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型 </p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句 </p><p>5、return 表达式</p><p><strong>语法：</strong> </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名 （参数列表）</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">       函数体语句</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>表达式</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> sum = num1 + num2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code> 函数名（参数）</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> <span class="comment">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> sum = num1 + num2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//调用add函数</span></span><br><span class="line"><span class="type">int</span> sum = <span class="built_in">add</span>(a, b);<span class="comment">//调用时的a，b称为实际参数，简称实参</span></span><br><span class="line">cout &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line">b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">sum = <span class="built_in">add</span>(a, b);</span><br><span class="line">cout &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p></blockquote><h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，==如果形参发生，并不会影响实参==</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"交换前："</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"num1 = "</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"num2 = "</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"交换后："</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"num1 = "</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"num2 = "</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"mian中的 a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"mian中的 b = "</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数常见样式</span></span><br><span class="line"><span class="comment">//1、 无参无返</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class="line">cout &lt;&lt; <span class="string">"this is test01"</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//test01(); 函数调用</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 有参无返</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"this is test02"</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、无参有返</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"this is test03 "</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、有参有返</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test04</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">cout &lt;&lt; <span class="string">"this is test04 "</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> sum = a + b;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明可以多次，定义只能一次</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件  </li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//swap.h文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//swap.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"swap.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main函数文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"swap.h"</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li>内存编号是从0开始记录的，一般用十六进制数字表示</li><li>可以利用指针变量保存地址</li></ul><h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、指针的定义</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>; <span class="comment">//定义整型变量a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class="line"><span class="type">int</span> * p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量赋值</span></span><br><span class="line">p = &amp;a; <span class="comment">//指针指向变量a的地址</span></span><br><span class="line">cout &lt;&lt; &amp;a &lt;&lt; endl; <span class="comment">//打印数据a的地址</span></span><br><span class="line">cout &lt;&lt; p &lt;&lt; endl;  <span class="comment">//打印指针变量p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、指针的使用</span></span><br><span class="line"><span class="comment">//通过*操作指针变量指向的内存</span></span><br><span class="line">cout &lt;&lt; <span class="string">"*p = "</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> * p;</span><br><span class="line">p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">//* 解引用</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span> *) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span> *) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span> *) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><p><strong>示例1：空指针</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量p指向内存地址编号为0的空间</span></span><br><span class="line"><span class="type">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问空指针报错 </span></span><br><span class="line"><span class="comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例2：野指针</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line"><span class="type">int</span> * p = (<span class="type">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问野指针报错 </span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p><ol><li>const修饰指针   — 常量指针</li><li>const修饰常量   — 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * p1 = &amp;a; </span><br><span class="line">p1 = &amp;b; <span class="comment">//正确</span></span><br><span class="line"><span class="comment">//*p1 = 100;  报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> p2 = &amp;a;</span><br><span class="line"><span class="comment">//p2 = &amp;b; //错误</span></span><br><span class="line">*p2 = <span class="number">100</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p3 = &amp;a;</span><br><span class="line"><span class="comment">//p3 = &amp;b; //错误</span></span><br><span class="line"><span class="comment">//*p3 = 100; //错误</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p></blockquote><h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = { <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> };</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> * p = arr;  <span class="comment">//指向数组的指针</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"第一个元素： "</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"指针访问第一个元素： "</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//利用指针遍历数组</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">p++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap1</span><span class="params">(<span class="type">int</span> a ,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b; </span><br><span class="line">b = temp;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(<span class="type">int</span> * p1, <span class="type">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> temp = *p1;</span><br><span class="line">*p1 = *p2;</span><br><span class="line">*p2 = temp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">swap1</span>(a, b); <span class="comment">// 值传递不会改变实参</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">swap2</span>(&amp;a, &amp;b); <span class="comment">//地址传递会改变实参</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> * arr, <span class="type">int</span> len)</span>  <span class="comment">//int * arr 也可以写为int arr[]</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = { <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> };</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">bubbleSort</span>(arr, len);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printArray</span>(arr, len);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote><h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p><h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 { 结构体成员列表 }；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">}stu3; <span class="comment">//结构体变量创建方式3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体变量创建方式1</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu1; <span class="comment">//struct 关键字可以省略</span></span><br><span class="line"></span><br><span class="line">stu1.name = <span class="string">"张三"</span>;</span><br><span class="line">stu1.age = <span class="number">18</span>;</span><br><span class="line">stu1.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu1.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu1.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu1.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体变量创建方式2</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu2 = { <span class="string">"李四"</span>,<span class="number">19</span>,<span class="number">60</span> };</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu2.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu2.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu2.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu3.name = <span class="string">"王五"</span>;</span><br><span class="line">stu3.age = <span class="number">18</span>;</span><br><span class="line">stu3.score = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu3.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu3.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu3.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p></blockquote><blockquote><p>总结2：创建结构体变量时，关键字struct可以省略</p></blockquote><blockquote><p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p></blockquote><h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体数组</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> arr[<span class="number">3</span>]=</span><br><span class="line">{</span><br><span class="line">{<span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">80</span> },</span><br><span class="line">{<span class="string">"李四"</span>,<span class="number">19</span>,<span class="number">60</span> },</span><br><span class="line">{<span class="string">"王五"</span>,<span class="number">20</span>,<span class="number">70</span> }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; arr[i].score &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu = { <span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">100</span>, };</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> * p = &amp;stu;</span><br><span class="line"></span><br><span class="line">p-&gt;score = <span class="number">80</span>; <span class="comment">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p></blockquote><h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">teacher</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line"><span class="type">int</span> id; <span class="comment">//职工编号</span></span><br><span class="line">string name;  <span class="comment">//教师姓名</span></span><br><span class="line"><span class="type">int</span> age;   <span class="comment">//教师年龄</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu; <span class="comment">//子结构体 学生</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">teacher</span> t1;</span><br><span class="line">t1.id = <span class="number">10000</span>;</span><br><span class="line">t1.name = <span class="string">"老王"</span>;</span><br><span class="line">t1.age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">t1.stu.name = <span class="string">"张三"</span>;</span><br><span class="line">t1.stu.age = <span class="number">18</span>;</span><br><span class="line">t1.stu.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"教师 职工编号： "</span> &lt;&lt; t1.id &lt;&lt; <span class="string">" 姓名： "</span> &lt;&lt; t1.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; t1.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"辅导学员 姓名： "</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="string">" 考试分数： "</span> &lt;&lt; t1.stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">(student stu )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">stu.age = <span class="number">28</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">"子函数中 姓名："</span> &lt;&lt; stu.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent2</span><span class="params">(student *stu)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">stu-&gt;age = <span class="number">28</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">"子函数中 姓名："</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">student stu = { <span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">100</span>};</span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="built_in">printStudent</span>(stu);</span><br><span class="line">cout &lt;&lt; <span class="string">"主函数中 姓名："</span> &lt;&lt; stu.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu.age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="built_in">printStudent2</span>(&amp;stu);</span><br><span class="line">cout &lt;&lt; <span class="string">"主函数中 姓名："</span> &lt;&lt; stu.name &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//const使用场景</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">(<span class="type">const</span> student *stu)</span> <span class="comment">//加const防止函数体中的误操作</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class="line">cout &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">student stu = { <span class="string">"张三"</span>,<span class="number">18</span>,<span class="number">100</span> };</span><br><span class="line"></span><br><span class="line"><span class="built_in">printStudent</span>(&amp;stu);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">{</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Teacher</span></span><br><span class="line">{</span><br><span class="line">string name;</span><br><span class="line">Student sArray[<span class="number">5</span>];</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">allocateSpace</span><span class="params">(Teacher tArray[] , <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">string tName = <span class="string">"教师"</span>;</span><br><span class="line">string sName = <span class="string">"学生"</span>;</span><br><span class="line">string nameSeed = <span class="string">"ABCDE"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">{</span><br><span class="line">tArray[i].name = tName + nameSeed[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">{</span><br><span class="line">tArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class="line">tArray[i].sArray[j].score = <span class="built_in">rand</span>() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printTeachers</span><span class="params">(Teacher tArray[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; tArray[i].name &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"\t姓名："</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="string">" 分数："</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>)); <span class="comment">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line">Teacher tArray[<span class="number">3</span>]; <span class="comment">//老师数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(tArray) / <span class="built_in">sizeof</span>(Teacher);</span><br><span class="line"></span><br><span class="line"><span class="built_in">allocateSpace</span>(tArray, len); <span class="comment">//创建数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printTeachers</span>(tArray, len); <span class="comment">//打印数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{<span class="string">"刘备"</span>,<span class="number">23</span>,<span class="string">"男"</span>},</span><br><span class="line">{<span class="string">"关羽"</span>,<span class="number">22</span>,<span class="string">"男"</span>},</span><br><span class="line">{<span class="string">"张飞"</span>,<span class="number">20</span>,<span class="string">"男"</span>},</span><br><span class="line">{<span class="string">"赵云"</span>,<span class="number">21</span>,<span class="string">"男"</span>},</span><br><span class="line">{<span class="string">"貂蝉"</span>,<span class="number">19</span>,<span class="string">"女"</span>},</span><br></pre></td></tr></tbody></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hero</span></span><br><span class="line">{</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">string sex;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(hero arr[] , <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age)</span><br><span class="line">{</span><br><span class="line">hero temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printHeros</span><span class="params">(hero arr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; <span class="string">"姓名： "</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">" 性别： "</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="string">" 年龄： "</span> &lt;&lt; arr[i].age &lt;&lt; endl;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hero</span> arr[<span class="number">5</span>] =</span><br><span class="line">{</span><br><span class="line">{<span class="string">"刘备"</span>,<span class="number">23</span>,<span class="string">"男"</span>},</span><br><span class="line">{<span class="string">"关羽"</span>,<span class="number">22</span>,<span class="string">"男"</span>},</span><br><span class="line">{<span class="string">"张飞"</span>,<span class="number">20</span>,<span class="string">"男"</span>},</span><br><span class="line">{<span class="string">"赵云"</span>,<span class="number">21</span>,<span class="string">"男"</span>},</span><br><span class="line">{<span class="string">"貂蝉"</span>,<span class="number">19</span>,<span class="string">"女"</span>},</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(hero); <span class="comment">//获取数组元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bubbleSort</span>(arr, len); <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printHeros</span>(arr, len); <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-基础入门&quot;&gt;&lt;a href=&quot;#C-基础入门&quot; class=&quot;headerlink&quot; title=&quot;C++基础入门&quot;&gt;&lt;/a&gt;C++基础入门&lt;/h1&gt;&lt;h2 id=&quot;1-C-初识&quot;&gt;&lt;a href=&quot;#1-C-初识&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="c++合集" scheme="https://bileis.github.io/tags/c-%E5%90%88%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://bileis.github.io/2024/03/02/hello-world/"/>
    <id>https://bileis.github.io/2024/03/02/hello-world/</id>
    <published>2024-03-02T07:59:38.566Z</published>
    <updated>2024-03-02T07:59:38.566Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
